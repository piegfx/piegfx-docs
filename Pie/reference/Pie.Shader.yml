### YamlMime:ManagedReference
items:
- uid: Pie.Shader
  commentId: T:Pie.Shader
  id: Shader
  parent: Pie
  children:
  - Pie.Shader.Dispose
  - Pie.Shader.IsDisposed
  - Pie.Shader.ReflectionInfo
  langs:
  - csharp
  - vb
  name: Shader
  nameWithType: Shader
  fullName: Pie.Shader
  type: Class
  source:
    remote:
      path: Pie/Shader.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Shader
    path: src/Pie/Pie/Shader.cs
    startLine: 9
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nA shader is a small program that is executed on the GPU. They are often used to transform vertices and draw pixels\n(fragments) to the screen.\n"
  example: []
  syntax:
    content: 'public abstract class Shader : IDisposable'
    content.vb: Public MustInherit Class Shader Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Pie.Shader.IsDisposed
  commentId: P:Pie.Shader.IsDisposed
  id: IsDisposed
  parent: Pie.Shader
  langs:
  - csharp
  - vb
  name: IsDisposed
  nameWithType: Shader.IsDisposed
  fullName: Pie.Shader.IsDisposed
  type: Property
  source:
    remote:
      path: Pie/Shader.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: IsDisposed
    path: src/Pie/Pie/Shader.cs
    startLine: 14
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nWill return <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when this <xref href=\"Pie.Shader\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.\n"
  example: []
  syntax:
    content: public abstract bool IsDisposed { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride Property IsDisposed As Boolean
  overload: Pie.Shader.IsDisposed*
- uid: Pie.Shader.ReflectionInfo
  commentId: P:Pie.Shader.ReflectionInfo
  id: ReflectionInfo
  parent: Pie.Shader
  langs:
  - csharp
  - vb
  name: ReflectionInfo
  nameWithType: Shader.ReflectionInfo
  fullName: Pie.Shader.ReflectionInfo
  type: Property
  source:
    remote:
      path: Pie/Shader.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: ReflectionInfo
    path: src/Pie/Pie/Shader.cs
    startLine: 19
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nThe <xref href=\"Pie.ReflectionInfo\" data-throw-if-not-resolved=\"false\"></xref> of this <xref href=\"Pie.Shader\" data-throw-if-not-resolved=\"false\"></xref>, if any.\n"
  example: []
  syntax:
    content: public ReflectionInfo[] ReflectionInfo { get; set; }
    parameters: []
    return:
      type: Pie.ReflectionInfo[]
    content.vb: Public Property ReflectionInfo As ReflectionInfo()
  overload: Pie.Shader.ReflectionInfo*
- uid: Pie.Shader.Dispose
  commentId: M:Pie.Shader.Dispose
  id: Dispose
  parent: Pie.Shader
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Shader.Dispose()
  fullName: Pie.Shader.Dispose()
  type: Method
  source:
    remote:
      path: Pie/Shader.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Dispose
    path: src/Pie/Pie/Shader.cs
    startLine: 24
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nDispose of this <xref href=\"Pie.Shader\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract void Dispose()
    content.vb: Public MustOverride Sub Dispose()
  overload: Pie.Shader.Dispose*
  implements:
  - System.IDisposable.Dispose
references:
- uid: Pie
  commentId: N:Pie
  name: Pie
  nameWithType: Pie
  fullName: Pie
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Pie.Shader
  commentId: T:Pie.Shader
  parent: Pie
  name: Shader
  nameWithType: Shader
  fullName: Pie.Shader
- uid: Pie.Shader.IsDisposed*
  commentId: Overload:Pie.Shader.IsDisposed
  name: IsDisposed
  nameWithType: Shader.IsDisposed
  fullName: Pie.Shader.IsDisposed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Pie.ReflectionInfo
  commentId: T:Pie.ReflectionInfo
  parent: Pie
  name: ReflectionInfo
  nameWithType: ReflectionInfo
  fullName: Pie.ReflectionInfo
- uid: Pie.Shader.ReflectionInfo*
  commentId: Overload:Pie.Shader.ReflectionInfo
  name: ReflectionInfo
  nameWithType: Shader.ReflectionInfo
  fullName: Pie.Shader.ReflectionInfo
- uid: Pie.ReflectionInfo[]
  isExternal: true
  name: ReflectionInfo[]
  nameWithType: ReflectionInfo[]
  fullName: Pie.ReflectionInfo[]
  nameWithType.vb: ReflectionInfo()
  fullName.vb: Pie.ReflectionInfo()
  name.vb: ReflectionInfo()
  spec.csharp:
  - uid: Pie.ReflectionInfo
    name: ReflectionInfo
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Pie.ReflectionInfo
    name: ReflectionInfo
  - name: (
  - name: )
- uid: Pie.Shader.Dispose*
  commentId: Overload:Pie.Shader.Dispose
  name: Dispose
  nameWithType: Shader.Dispose
  fullName: Pie.Shader.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
