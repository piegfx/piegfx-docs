### YamlMime:ManagedReference
items:
- uid: Pie.ShaderCompiler.Extensions
  commentId: T:Pie.ShaderCompiler.Extensions
  id: Extensions
  parent: Pie.ShaderCompiler
  children:
  - Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader(Pie.GraphicsDevice,Pie.ReflectionInfo[]@,Pie.ShaderAttachment[])
  - Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader(Pie.GraphicsDevice,Pie.ShaderAttachment[])
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: Pie.ShaderCompiler.Extensions
  type: Class
  source:
    remote:
      path: Pie.ShaderCompiler/Extensions.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Extensions
    path: src/Pie/Pie.ShaderCompiler/Extensions.cs
    startLine: 2
  assemblies:
  - Pie.ShaderCompiler
  namespace: Pie.ShaderCompiler
  syntax:
    content: public static class Extensions
    content.vb: Public Module Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader(Pie.GraphicsDevice,Pie.ShaderAttachment[])
  commentId: M:Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader(Pie.GraphicsDevice,Pie.ShaderAttachment[])
  id: CreateCrossPlatformShader(Pie.GraphicsDevice,Pie.ShaderAttachment[])
  isExtensionMethod: true
  parent: Pie.ShaderCompiler.Extensions
  langs:
  - csharp
  - vb
  name: CreateCrossPlatformShader(GraphicsDevice, params ShaderAttachment[])
  nameWithType: Extensions.CreateCrossPlatformShader(GraphicsDevice, params ShaderAttachment[])
  fullName: Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader(Pie.GraphicsDevice, params Pie.ShaderAttachment[])
  type: Method
  source:
    remote:
      path: Pie.ShaderCompiler/Extensions.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateCrossPlatformShader
    path: src/Pie/Pie.ShaderCompiler/Extensions.cs
    startLine: 12
  assemblies:
  - Pie.ShaderCompiler
  namespace: Pie.ShaderCompiler
  summary: "\nCreate a cross-platform shader from GLSL. (HLSL coming later). Uses shaderc + spirv-cross to cross-compile\nbetween the different graphics APIs.\n"
  example: []
  syntax:
    content: public static Shader CreateCrossPlatformShader(this GraphicsDevice device, params ShaderAttachment[] attachments)
    parameters:
    - id: device
      type: Pie.GraphicsDevice
      description: The graphics device to perform shader compilation on.
    - id: attachments
      type: Pie.ShaderAttachment[]
      description: The shader attachments.
    return:
      type: Pie.Shader
      description: The created shader.
    content.vb: Public Shared Function CreateCrossPlatformShader(device As GraphicsDevice, ParamArray attachments As ShaderAttachment()) As Shader
  overload: Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader*
  exceptions:
  - type: Pie.PieException
    commentId: T:Pie.PieException
    description: Thrown if there was an error compiling the shader.
  nameWithType.vb: Extensions.CreateCrossPlatformShader(GraphicsDevice, ParamArray ShaderAttachment())
  fullName.vb: Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader(Pie.GraphicsDevice, ParamArray Pie.ShaderAttachment())
  name.vb: CreateCrossPlatformShader(GraphicsDevice, ParamArray ShaderAttachment())
- uid: Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader(Pie.GraphicsDevice,Pie.ReflectionInfo[]@,Pie.ShaderAttachment[])
  commentId: M:Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader(Pie.GraphicsDevice,Pie.ReflectionInfo[]@,Pie.ShaderAttachment[])
  id: CreateCrossPlatformShader(Pie.GraphicsDevice,Pie.ReflectionInfo[]@,Pie.ShaderAttachment[])
  isExtensionMethod: true
  parent: Pie.ShaderCompiler.Extensions
  langs:
  - csharp
  - vb
  name: CreateCrossPlatformShader(GraphicsDevice, out ReflectionInfo[], params ShaderAttachment[])
  nameWithType: Extensions.CreateCrossPlatformShader(GraphicsDevice, out ReflectionInfo[], params ShaderAttachment[])
  fullName: Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader(Pie.GraphicsDevice, out Pie.ReflectionInfo[], params Pie.ShaderAttachment[])
  type: Method
  source:
    remote:
      path: Pie.ShaderCompiler/Extensions.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateCrossPlatformShader
    path: src/Pie/Pie.ShaderCompiler/Extensions.cs
    startLine: 45
  assemblies:
  - Pie.ShaderCompiler
  namespace: Pie.ShaderCompiler
  summary: "\nCreate a cross-platform shader from GLSL. (HLSL coming later). Uses shaderc + spirv-cross to cross-compile\nbetween the different graphics APIs. Provides shader reflection info as well (this is in the same order as the\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">attachments</code>.)\n"
  example: []
  syntax:
    content: public static Shader CreateCrossPlatformShader(this GraphicsDevice device, out ReflectionInfo[] reflectionInfo, params ShaderAttachment[] attachments)
    parameters:
    - id: device
      type: Pie.GraphicsDevice
      description: The graphics device to perform shader compilation on.
    - id: reflectionInfo
      type: Pie.ReflectionInfo[]
      description: The reflection info for the given shader attachments.
    - id: attachments
      type: Pie.ShaderAttachment[]
      description: The shader attachments.
    return:
      type: Pie.Shader
      description: The created shader.
    content.vb: Public Shared Function CreateCrossPlatformShader(device As GraphicsDevice, reflectionInfo As ReflectionInfo(), ParamArray attachments As ShaderAttachment()) As Shader
  overload: Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader*
  exceptions:
  - type: Pie.PieException
    commentId: T:Pie.PieException
    description: Thrown if there was an error compiling the shader.
  nameWithType.vb: Extensions.CreateCrossPlatformShader(GraphicsDevice, ReflectionInfo(), ParamArray ShaderAttachment())
  fullName.vb: Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader(Pie.GraphicsDevice, Pie.ReflectionInfo(), ParamArray Pie.ShaderAttachment())
  name.vb: CreateCrossPlatformShader(GraphicsDevice, ReflectionInfo(), ParamArray ShaderAttachment())
references:
- uid: Pie.ShaderCompiler
  commentId: N:Pie.ShaderCompiler
  name: Pie.ShaderCompiler
  nameWithType: Pie.ShaderCompiler
  fullName: Pie.ShaderCompiler
  spec.csharp:
  - uid: Pie
    name: Pie
  - name: .
  - uid: Pie.ShaderCompiler
    name: ShaderCompiler
  spec.vb:
  - uid: Pie
    name: Pie
  - name: .
  - uid: Pie.ShaderCompiler
    name: ShaderCompiler
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Pie.PieException
  commentId: T:Pie.PieException
  name: PieException
  nameWithType: PieException
  fullName: Pie.PieException
- uid: Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader*
  commentId: Overload:Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader
  name: CreateCrossPlatformShader
  nameWithType: Extensions.CreateCrossPlatformShader
  fullName: Pie.ShaderCompiler.Extensions.CreateCrossPlatformShader
- uid: Pie.GraphicsDevice
  commentId: T:Pie.GraphicsDevice
  parent: Pie
  name: GraphicsDevice
  nameWithType: GraphicsDevice
  fullName: Pie.GraphicsDevice
- uid: Pie.ShaderAttachment[]
  isExternal: true
  name: ShaderAttachment[]
  nameWithType: ShaderAttachment[]
  fullName: Pie.ShaderAttachment[]
  nameWithType.vb: ShaderAttachment()
  fullName.vb: Pie.ShaderAttachment()
  name.vb: ShaderAttachment()
  spec.csharp:
  - uid: Pie.ShaderAttachment
    name: ShaderAttachment
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Pie.ShaderAttachment
    name: ShaderAttachment
  - name: (
  - name: )
- uid: Pie.Shader
  commentId: T:Pie.Shader
  parent: Pie
  name: Shader
  nameWithType: Shader
  fullName: Pie.Shader
- uid: Pie
  commentId: N:Pie
  name: Pie
  nameWithType: Pie
  fullName: Pie
- uid: Pie.ReflectionInfo[]
  isExternal: true
  name: ReflectionInfo[]
  nameWithType: ReflectionInfo[]
  fullName: Pie.ReflectionInfo[]
  nameWithType.vb: ReflectionInfo()
  fullName.vb: Pie.ReflectionInfo()
  name.vb: ReflectionInfo()
  spec.csharp:
  - uid: Pie.ReflectionInfo
    name: ReflectionInfo
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Pie.ReflectionInfo
    name: ReflectionInfo
  - name: (
  - name: )
