### YamlMime:ManagedReference
items:
- uid: Pie.Freetype.FreeType
  commentId: T:Pie.Freetype.FreeType
  id: FreeType
  parent: Pie.Freetype
  children:
  - Pie.Freetype.FreeType.#ctor
  - Pie.Freetype.FreeType.CreateFace(System.Byte[],System.Int32)
  - Pie.Freetype.FreeType.CreateFace(System.String,System.Int32)
  - Pie.Freetype.FreeType.Dispose
  langs:
  - csharp
  - vb
  name: FreeType
  nameWithType: FreeType
  fullName: Pie.Freetype.FreeType
  type: Class
  source:
    remote:
      path: Pie.Freetype/FreeType.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: FreeType
    path: src/Pie/Pie.Freetype/FreeType.cs
    startLine: 9
  assemblies:
  - Pie.Freetype
  namespace: Pie.Freetype
  syntax:
    content: 'public class FreeType : IDisposable'
    content.vb: Public Class FreeType Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Pie.Freetype.FreeType.#ctor
  commentId: M:Pie.Freetype.FreeType.#ctor
  id: '#ctor'
  parent: Pie.Freetype.FreeType
  langs:
  - csharp
  - vb
  name: FreeType()
  nameWithType: FreeType.FreeType()
  fullName: Pie.Freetype.FreeType.FreeType()
  type: Constructor
  source:
    remote:
      path: Pie.Freetype/FreeType.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: .ctor
    path: src/Pie/Pie.Freetype/FreeType.cs
    startLine: 13
  assemblies:
  - Pie.Freetype
  namespace: Pie.Freetype
  syntax:
    content: public FreeType()
    content.vb: Public Sub New()
  overload: Pie.Freetype.FreeType.#ctor*
  nameWithType.vb: FreeType.New()
  fullName.vb: Pie.Freetype.FreeType.New()
  name.vb: New()
- uid: Pie.Freetype.FreeType.CreateFace(System.String,System.Int32)
  commentId: M:Pie.Freetype.FreeType.CreateFace(System.String,System.Int32)
  id: CreateFace(System.String,System.Int32)
  parent: Pie.Freetype.FreeType
  langs:
  - csharp
  - vb
  name: CreateFace(string, int)
  nameWithType: FreeType.CreateFace(string, int)
  fullName: Pie.Freetype.FreeType.CreateFace(string, int)
  type: Method
  source:
    remote:
      path: Pie.Freetype/FreeType.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateFace
    path: src/Pie/Pie.Freetype/FreeType.cs
    startLine: 19
  assemblies:
  - Pie.Freetype
  namespace: Pie.Freetype
  syntax:
    content: public Face CreateFace(string path, int initialSize)
    parameters:
    - id: path
      type: System.String
    - id: initialSize
      type: System.Int32
    return:
      type: Pie.Freetype.Face
    content.vb: Public Function CreateFace(path As String, initialSize As Integer) As Face
  overload: Pie.Freetype.FreeType.CreateFace*
  nameWithType.vb: FreeType.CreateFace(String, Integer)
  fullName.vb: Pie.Freetype.FreeType.CreateFace(String, Integer)
  name.vb: CreateFace(String, Integer)
- uid: Pie.Freetype.FreeType.CreateFace(System.Byte[],System.Int32)
  commentId: M:Pie.Freetype.FreeType.CreateFace(System.Byte[],System.Int32)
  id: CreateFace(System.Byte[],System.Int32)
  parent: Pie.Freetype.FreeType
  langs:
  - csharp
  - vb
  name: CreateFace(byte[], int)
  nameWithType: FreeType.CreateFace(byte[], int)
  fullName: Pie.Freetype.FreeType.CreateFace(byte[], int)
  type: Method
  source:
    remote:
      path: Pie.Freetype/FreeType.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateFace
    path: src/Pie/Pie.Freetype/FreeType.cs
    startLine: 28
  assemblies:
  - Pie.Freetype
  namespace: Pie.Freetype
  syntax:
    content: public Face CreateFace(byte[] data, int initialSize)
    parameters:
    - id: data
      type: System.Byte[]
    - id: initialSize
      type: System.Int32
    return:
      type: Pie.Freetype.Face
    content.vb: Public Function CreateFace(data As Byte(), initialSize As Integer) As Face
  overload: Pie.Freetype.FreeType.CreateFace*
  nameWithType.vb: FreeType.CreateFace(Byte(), Integer)
  fullName.vb: Pie.Freetype.FreeType.CreateFace(Byte(), Integer)
  name.vb: CreateFace(Byte(), Integer)
- uid: Pie.Freetype.FreeType.Dispose
  commentId: M:Pie.Freetype.FreeType.Dispose
  id: Dispose
  parent: Pie.Freetype.FreeType
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: FreeType.Dispose()
  fullName: Pie.Freetype.FreeType.Dispose()
  type: Method
  source:
    remote:
      path: Pie.Freetype/FreeType.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Dispose
    path: src/Pie/Pie.Freetype/FreeType.cs
    startLine: 36
  assemblies:
  - Pie.Freetype
  namespace: Pie.Freetype
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: Pie.Freetype.FreeType.Dispose*
  implements:
  - System.IDisposable.Dispose
references:
- uid: Pie.Freetype
  commentId: N:Pie.Freetype
  name: Pie.Freetype
  nameWithType: Pie.Freetype
  fullName: Pie.Freetype
  spec.csharp:
  - uid: Pie
    name: Pie
  - name: .
  - uid: Pie.Freetype
    name: Freetype
  spec.vb:
  - uid: Pie
    name: Pie
  - name: .
  - uid: Pie.Freetype
    name: Freetype
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Pie.Freetype.FreeType.#ctor*
  commentId: Overload:Pie.Freetype.FreeType.#ctor
  name: FreeType
  nameWithType: FreeType.FreeType
  fullName: Pie.Freetype.FreeType.FreeType
  nameWithType.vb: FreeType.New
  fullName.vb: Pie.Freetype.FreeType.New
  name.vb: New
- uid: Pie.Freetype.FreeType.CreateFace*
  commentId: Overload:Pie.Freetype.FreeType.CreateFace
  name: CreateFace
  nameWithType: FreeType.CreateFace
  fullName: Pie.Freetype.FreeType.CreateFace
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Pie.Freetype.Face
  commentId: T:Pie.Freetype.Face
  parent: Pie.Freetype
  name: Face
  nameWithType: Face
  fullName: Pie.Freetype.Face
- uid: System.Byte[]
  isExternal: true
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
  - name: (
  - name: )
- uid: Pie.Freetype.FreeType.Dispose*
  commentId: Overload:Pie.Freetype.FreeType.Dispose
  name: Dispose
  nameWithType: FreeType.Dispose
  fullName: Pie.Freetype.FreeType.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
