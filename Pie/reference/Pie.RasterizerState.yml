### YamlMime:ManagedReference
items:
- uid: Pie.RasterizerState
  commentId: T:Pie.RasterizerState
  id: RasterizerState
  parent: Pie
  children:
  - Pie.RasterizerState.Description
  - Pie.RasterizerState.Dispose
  - Pie.RasterizerState.Equals(Pie.RasterizerState)
  - Pie.RasterizerState.Equals(System.Object)
  - Pie.RasterizerState.GetHashCode
  - Pie.RasterizerState.IsDisposed
  - Pie.RasterizerState.op_Equality(Pie.RasterizerState,Pie.RasterizerState)
  - Pie.RasterizerState.op_Inequality(Pie.RasterizerState,Pie.RasterizerState)
  langs:
  - csharp
  - vb
  name: RasterizerState
  nameWithType: RasterizerState
  fullName: Pie.RasterizerState
  type: Class
  source:
    remote:
      path: Pie/RasterizerState.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: RasterizerState
    path: src/Pie/Pie/RasterizerState.cs
    startLine: 7
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nUsed to tell the graphics device how to raster triangles.\n"
  example: []
  syntax:
    content: 'public abstract class RasterizerState : IDisposable, IEquatable<RasterizerState>'
    content.vb: Public MustInherit Class RasterizerState Implements IDisposable, IEquatable(Of RasterizerState)
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.IEquatable{Pie.RasterizerState}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Pie.RasterizerState.IsDisposed
  commentId: P:Pie.RasterizerState.IsDisposed
  id: IsDisposed
  parent: Pie.RasterizerState
  langs:
  - csharp
  - vb
  name: IsDisposed
  nameWithType: RasterizerState.IsDisposed
  fullName: Pie.RasterizerState.IsDisposed
  type: Property
  source:
    remote:
      path: Pie/RasterizerState.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: IsDisposed
    path: src/Pie/Pie/RasterizerState.cs
    startLine: 12
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nWill return <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when this rasterizer state has been disposed.\n"
  example: []
  syntax:
    content: public abstract bool IsDisposed { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride Property IsDisposed As Boolean
  overload: Pie.RasterizerState.IsDisposed*
- uid: Pie.RasterizerState.Description
  commentId: P:Pie.RasterizerState.Description
  id: Description
  parent: Pie.RasterizerState
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: RasterizerState.Description
  fullName: Pie.RasterizerState.Description
  type: Property
  source:
    remote:
      path: Pie/RasterizerState.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Description
    path: src/Pie/Pie/RasterizerState.cs
    startLine: 17
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nThe <xref href=\"Pie.RasterizerStateDescription\" data-throw-if-not-resolved=\"false\"></xref> of this <xref href=\"Pie.RasterizerState\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract RasterizerStateDescription Description { get; }
    parameters: []
    return:
      type: Pie.RasterizerStateDescription
    content.vb: Public MustOverride ReadOnly Property Description As RasterizerStateDescription
  overload: Pie.RasterizerState.Description*
- uid: Pie.RasterizerState.Dispose
  commentId: M:Pie.RasterizerState.Dispose
  id: Dispose
  parent: Pie.RasterizerState
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: RasterizerState.Dispose()
  fullName: Pie.RasterizerState.Dispose()
  type: Method
  source:
    remote:
      path: Pie/RasterizerState.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Dispose
    path: src/Pie/Pie/RasterizerState.cs
    startLine: 22
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nDispose of this <xref href=\"Pie.RasterizerState\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract void Dispose()
    content.vb: Public MustOverride Sub Dispose()
  overload: Pie.RasterizerState.Dispose*
  implements:
  - System.IDisposable.Dispose
- uid: Pie.RasterizerState.Equals(Pie.RasterizerState)
  commentId: M:Pie.RasterizerState.Equals(Pie.RasterizerState)
  id: Equals(Pie.RasterizerState)
  parent: Pie.RasterizerState
  langs:
  - csharp
  - vb
  name: Equals(RasterizerState)
  nameWithType: RasterizerState.Equals(RasterizerState)
  fullName: Pie.RasterizerState.Equals(Pie.RasterizerState)
  type: Method
  source:
    remote:
      path: Pie/RasterizerState.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Equals
    path: src/Pie/Pie/RasterizerState.cs
    startLine: 24
  assemblies:
  - Pie
  namespace: Pie
  syntax:
    content: public bool Equals(RasterizerState other)
    parameters:
    - id: other
      type: Pie.RasterizerState
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As RasterizerState) As Boolean
  overload: Pie.RasterizerState.Equals*
  implements:
  - System.IEquatable{Pie.RasterizerState}.Equals(Pie.RasterizerState)
- uid: Pie.RasterizerState.Equals(System.Object)
  commentId: M:Pie.RasterizerState.Equals(System.Object)
  id: Equals(System.Object)
  parent: Pie.RasterizerState
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: RasterizerState.Equals(object)
  fullName: Pie.RasterizerState.Equals(object)
  type: Method
  source:
    remote:
      path: Pie/RasterizerState.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Equals
    path: src/Pie/Pie/RasterizerState.cs
    startLine: 31
  assemblies:
  - Pie
  namespace: Pie
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Pie.RasterizerState.Equals*
  nameWithType.vb: RasterizerState.Equals(Object)
  fullName.vb: Pie.RasterizerState.Equals(Object)
  name.vb: Equals(Object)
- uid: Pie.RasterizerState.GetHashCode
  commentId: M:Pie.RasterizerState.GetHashCode
  id: GetHashCode
  parent: Pie.RasterizerState
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: RasterizerState.GetHashCode()
  fullName: Pie.RasterizerState.GetHashCode()
  type: Method
  source:
    remote:
      path: Pie/RasterizerState.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: GetHashCode
    path: src/Pie/Pie/RasterizerState.cs
    startLine: 39
  assemblies:
  - Pie
  namespace: Pie
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.Object.GetHashCode
  overload: Pie.RasterizerState.GetHashCode*
- uid: Pie.RasterizerState.op_Equality(Pie.RasterizerState,Pie.RasterizerState)
  commentId: M:Pie.RasterizerState.op_Equality(Pie.RasterizerState,Pie.RasterizerState)
  id: op_Equality(Pie.RasterizerState,Pie.RasterizerState)
  parent: Pie.RasterizerState
  langs:
  - csharp
  - vb
  name: operator ==(RasterizerState, RasterizerState)
  nameWithType: RasterizerState.operator ==(RasterizerState, RasterizerState)
  fullName: Pie.RasterizerState.operator ==(Pie.RasterizerState, Pie.RasterizerState)
  type: Operator
  source:
    remote:
      path: Pie/RasterizerState.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: op_Equality
    path: src/Pie/Pie/RasterizerState.cs
    startLine: 44
  assemblies:
  - Pie
  namespace: Pie
  syntax:
    content: public static bool operator ==(RasterizerState left, RasterizerState right)
    parameters:
    - id: left
      type: Pie.RasterizerState
    - id: right
      type: Pie.RasterizerState
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As RasterizerState, right As RasterizerState) As Boolean
  overload: Pie.RasterizerState.op_Equality*
  nameWithType.vb: RasterizerState.=(RasterizerState, RasterizerState)
  fullName.vb: Pie.RasterizerState.=(Pie.RasterizerState, Pie.RasterizerState)
  name.vb: =(RasterizerState, RasterizerState)
- uid: Pie.RasterizerState.op_Inequality(Pie.RasterizerState,Pie.RasterizerState)
  commentId: M:Pie.RasterizerState.op_Inequality(Pie.RasterizerState,Pie.RasterizerState)
  id: op_Inequality(Pie.RasterizerState,Pie.RasterizerState)
  parent: Pie.RasterizerState
  langs:
  - csharp
  - vb
  name: operator !=(RasterizerState, RasterizerState)
  nameWithType: RasterizerState.operator !=(RasterizerState, RasterizerState)
  fullName: Pie.RasterizerState.operator !=(Pie.RasterizerState, Pie.RasterizerState)
  type: Operator
  source:
    remote:
      path: Pie/RasterizerState.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: op_Inequality
    path: src/Pie/Pie/RasterizerState.cs
    startLine: 49
  assemblies:
  - Pie
  namespace: Pie
  syntax:
    content: public static bool operator !=(RasterizerState left, RasterizerState right)
    parameters:
    - id: left
      type: Pie.RasterizerState
    - id: right
      type: Pie.RasterizerState
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As RasterizerState, right As RasterizerState) As Boolean
  overload: Pie.RasterizerState.op_Inequality*
  nameWithType.vb: RasterizerState.<>(RasterizerState, RasterizerState)
  fullName.vb: Pie.RasterizerState.<>(Pie.RasterizerState, Pie.RasterizerState)
  name.vb: <>(RasterizerState, RasterizerState)
references:
- uid: Pie
  commentId: N:Pie
  name: Pie
  nameWithType: Pie
  fullName: Pie
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.IEquatable{Pie.RasterizerState}
  commentId: T:System.IEquatable{Pie.RasterizerState}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<RasterizerState>
  nameWithType: IEquatable<RasterizerState>
  fullName: System.IEquatable<Pie.RasterizerState>
  nameWithType.vb: IEquatable(Of RasterizerState)
  fullName.vb: System.IEquatable(Of Pie.RasterizerState)
  name.vb: IEquatable(Of RasterizerState)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: <
  - uid: Pie.RasterizerState
    name: RasterizerState
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Pie.RasterizerState
    name: RasterizerState
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Pie.RasterizerState.IsDisposed*
  commentId: Overload:Pie.RasterizerState.IsDisposed
  name: IsDisposed
  nameWithType: RasterizerState.IsDisposed
  fullName: Pie.RasterizerState.IsDisposed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Pie.RasterizerStateDescription
  commentId: T:Pie.RasterizerStateDescription
  parent: Pie
  name: RasterizerStateDescription
  nameWithType: RasterizerStateDescription
  fullName: Pie.RasterizerStateDescription
- uid: Pie.RasterizerState
  commentId: T:Pie.RasterizerState
  parent: Pie
  name: RasterizerState
  nameWithType: RasterizerState
  fullName: Pie.RasterizerState
- uid: Pie.RasterizerState.Description*
  commentId: Overload:Pie.RasterizerState.Description
  name: Description
  nameWithType: RasterizerState.Description
  fullName: Pie.RasterizerState.Description
- uid: Pie.RasterizerState.Dispose*
  commentId: Overload:Pie.RasterizerState.Dispose
  name: Dispose
  nameWithType: RasterizerState.Dispose
  fullName: Pie.RasterizerState.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
- uid: Pie.RasterizerState.Equals*
  commentId: Overload:Pie.RasterizerState.Equals
  name: Equals
  nameWithType: RasterizerState.Equals
  fullName: Pie.RasterizerState.Equals
- uid: System.IEquatable{Pie.RasterizerState}.Equals(Pie.RasterizerState)
  commentId: M:System.IEquatable{Pie.RasterizerState}.Equals(Pie.RasterizerState)
  parent: System.IEquatable{Pie.RasterizerState}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(RasterizerState)
  nameWithType: IEquatable<RasterizerState>.Equals(RasterizerState)
  fullName: System.IEquatable<Pie.RasterizerState>.Equals(Pie.RasterizerState)
  nameWithType.vb: IEquatable(Of RasterizerState).Equals(RasterizerState)
  fullName.vb: System.IEquatable(Of Pie.RasterizerState).Equals(Pie.RasterizerState)
  spec.csharp:
  - uid: System.IEquatable{Pie.RasterizerState}.Equals(Pie.RasterizerState)
    name: Equals
    isExternal: true
  - name: (
  - uid: Pie.RasterizerState
    name: RasterizerState
  - name: )
  spec.vb:
  - uid: System.IEquatable{Pie.RasterizerState}.Equals(Pie.RasterizerState)
    name: Equals
    isExternal: true
  - name: (
  - uid: Pie.RasterizerState
    name: RasterizerState
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: Pie.RasterizerState.GetHashCode*
  commentId: Overload:Pie.RasterizerState.GetHashCode
  name: GetHashCode
  nameWithType: RasterizerState.GetHashCode
  fullName: Pie.RasterizerState.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Pie.RasterizerState.op_Equality*
  commentId: Overload:Pie.RasterizerState.op_Equality
  name: operator ==
  nameWithType: RasterizerState.operator ==
  fullName: Pie.RasterizerState.operator ==
  nameWithType.vb: RasterizerState.=
  fullName.vb: Pie.RasterizerState.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Pie.RasterizerState.op_Equality*
    name: ==
- uid: Pie.RasterizerState.op_Inequality*
  commentId: Overload:Pie.RasterizerState.op_Inequality
  name: operator !=
  nameWithType: RasterizerState.operator !=
  fullName: Pie.RasterizerState.operator !=
  nameWithType.vb: RasterizerState.<>
  fullName.vb: Pie.RasterizerState.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Pie.RasterizerState.op_Inequality*
    name: '!='
