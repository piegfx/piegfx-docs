### YamlMime:ManagedReference
items:
- uid: Pie.ShaderCompiler.CompilerResult
  commentId: T:Pie.ShaderCompiler.CompilerResult
  id: CompilerResult
  parent: Pie.ShaderCompiler
  children:
  - Pie.ShaderCompiler.CompilerResult.#ctor(System.Byte[],System.Boolean,System.String,System.Nullable{Pie.ShaderCompiler.ReflectionInfo})
  - Pie.ShaderCompiler.CompilerResult.Error
  - Pie.ShaderCompiler.CompilerResult.IsSuccess
  - Pie.ShaderCompiler.CompilerResult.ReflectionInfo
  - Pie.ShaderCompiler.CompilerResult.Result
  langs:
  - csharp
  - vb
  name: CompilerResult
  nameWithType: CompilerResult
  fullName: Pie.ShaderCompiler.CompilerResult
  type: Struct
  source:
    remote:
      path: Pie.ShaderCompiler/CompilerResult.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CompilerResult
    path: src/Pie/Pie.ShaderCompiler/CompilerResult.cs
    startLine: 7
  assemblies:
  - Pie.ShaderCompiler
  namespace: Pie.ShaderCompiler
  summary: "\nThe result of a shader compilation.\n"
  example: []
  syntax:
    content: public struct CompilerResult
    content.vb: Public Structure CompilerResult
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: Pie.ShaderCompiler.CompilerResult.Result
  commentId: F:Pie.ShaderCompiler.CompilerResult.Result
  id: Result
  parent: Pie.ShaderCompiler.CompilerResult
  langs:
  - csharp
  - vb
  name: Result
  nameWithType: CompilerResult.Result
  fullName: Pie.ShaderCompiler.CompilerResult.Result
  type: Field
  source:
    remote:
      path: Pie.ShaderCompiler/CompilerResult.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Result
    path: src/Pie/Pie.ShaderCompiler/CompilerResult.cs
    startLine: 13
  assemblies:
  - Pie.ShaderCompiler
  namespace: Pie.ShaderCompiler
  summary: "\nThe result, if any.\n"
  remarks: Will be <xref uid="langword_csharp_null" name="null" href=""></xref> if <xref href="Pie.ShaderCompiler.CompilerResult.IsSuccess" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_false" name="false" href=""></xref>.
  example: []
  syntax:
    content: public readonly byte[] Result
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Result As Byte()
- uid: Pie.ShaderCompiler.CompilerResult.IsSuccess
  commentId: F:Pie.ShaderCompiler.CompilerResult.IsSuccess
  id: IsSuccess
  parent: Pie.ShaderCompiler.CompilerResult
  langs:
  - csharp
  - vb
  name: IsSuccess
  nameWithType: CompilerResult.IsSuccess
  fullName: Pie.ShaderCompiler.CompilerResult.IsSuccess
  type: Field
  source:
    remote:
      path: Pie.ShaderCompiler/CompilerResult.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: IsSuccess
    path: src/Pie/Pie.ShaderCompiler/CompilerResult.cs
    startLine: 18
  assemblies:
  - Pie.ShaderCompiler
  namespace: Pie.ShaderCompiler
  summary: "\nWhether or not the result was a success.\n"
  example: []
  syntax:
    content: public readonly bool IsSuccess
    return:
      type: System.Boolean
    content.vb: Public ReadOnly IsSuccess As Boolean
- uid: Pie.ShaderCompiler.CompilerResult.Error
  commentId: F:Pie.ShaderCompiler.CompilerResult.Error
  id: Error
  parent: Pie.ShaderCompiler.CompilerResult
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: CompilerResult.Error
  fullName: Pie.ShaderCompiler.CompilerResult.Error
  type: Field
  source:
    remote:
      path: Pie.ShaderCompiler/CompilerResult.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Error
    path: src/Pie/Pie.ShaderCompiler/CompilerResult.cs
    startLine: 24
  assemblies:
  - Pie.ShaderCompiler
  namespace: Pie.ShaderCompiler
  summary: "\nAn error string, if any.\n"
  remarks: Will be <xref uid="langword_csharp_null" name="null" href=""></xref> or empty if <xref href="Pie.ShaderCompiler.CompilerResult.IsSuccess" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>.
  example: []
  syntax:
    content: public readonly string Error
    return:
      type: System.String
    content.vb: Public ReadOnly [Error] As String
- uid: Pie.ShaderCompiler.CompilerResult.ReflectionInfo
  commentId: F:Pie.ShaderCompiler.CompilerResult.ReflectionInfo
  id: ReflectionInfo
  parent: Pie.ShaderCompiler.CompilerResult
  langs:
  - csharp
  - vb
  name: ReflectionInfo
  nameWithType: CompilerResult.ReflectionInfo
  fullName: Pie.ShaderCompiler.CompilerResult.ReflectionInfo
  type: Field
  source:
    remote:
      path: Pie.ShaderCompiler/CompilerResult.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: ReflectionInfo
    path: src/Pie/Pie.ShaderCompiler/CompilerResult.cs
    startLine: 29
  assemblies:
  - Pie.ShaderCompiler
  namespace: Pie.ShaderCompiler
  summary: "\nThe <xref href=\"Pie.ShaderCompiler.CompilerResult.ReflectionInfo\" data-throw-if-not-resolved=\"false\"></xref>, if any.\n"
  example: []
  syntax:
    content: public readonly ReflectionInfo? ReflectionInfo
    return:
      type: System.Nullable{Pie.ShaderCompiler.ReflectionInfo}
    content.vb: Public ReadOnly ReflectionInfo As ReflectionInfo?
- uid: Pie.ShaderCompiler.CompilerResult.#ctor(System.Byte[],System.Boolean,System.String,System.Nullable{Pie.ShaderCompiler.ReflectionInfo})
  commentId: M:Pie.ShaderCompiler.CompilerResult.#ctor(System.Byte[],System.Boolean,System.String,System.Nullable{Pie.ShaderCompiler.ReflectionInfo})
  id: '#ctor(System.Byte[],System.Boolean,System.String,System.Nullable{Pie.ShaderCompiler.ReflectionInfo})'
  parent: Pie.ShaderCompiler.CompilerResult
  langs:
  - csharp
  - vb
  name: CompilerResult(byte[], bool, string, ReflectionInfo?)
  nameWithType: CompilerResult.CompilerResult(byte[], bool, string, ReflectionInfo?)
  fullName: Pie.ShaderCompiler.CompilerResult.CompilerResult(byte[], bool, string, Pie.ShaderCompiler.ReflectionInfo?)
  type: Constructor
  source:
    remote:
      path: Pie.ShaderCompiler/CompilerResult.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: .ctor
    path: src/Pie/Pie.ShaderCompiler/CompilerResult.cs
    startLine: 38
  assemblies:
  - Pie.ShaderCompiler
  namespace: Pie.ShaderCompiler
  summary: "\nCreate a new <xref href=\"Pie.ShaderCompiler.CompilerResult\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CompilerResult(byte[] result, bool isSuccess, string error, ReflectionInfo? reflectionInfo)
    parameters:
    - id: result
      type: System.Byte[]
      description: The result, if any. This should be <xref uid="langword_csharp_null" name="null" href=""></xref> if <code data-dev-comment-type="paramref" class="paramref">isSuccess</code> is <xref uid="langword_csharp_false" name="false" href=""></xref>.
    - id: isSuccess
      type: System.Boolean
      description: Whether or not the result was a success.
    - id: error
      type: System.String
      description: An error string, if any. This should be <xref uid="langword_csharp_null" name="null" href=""></xref> or empty if <code data-dev-comment-type="paramref" class="paramref">isSuccess</code> is <xref uid="langword_csharp_true" name="true" href=""></xref>.
    - id: reflectionInfo
      type: System.Nullable{Pie.ShaderCompiler.ReflectionInfo}
      description: The <xref href="Pie.ShaderCompiler.CompilerResult.ReflectionInfo" data-throw-if-not-resolved="false"></xref>, if any.
    content.vb: Public Sub New(result As Byte(), isSuccess As Boolean, [error] As String, reflectionInfo As ReflectionInfo?)
  overload: Pie.ShaderCompiler.CompilerResult.#ctor*
  nameWithType.vb: CompilerResult.New(Byte(), Boolean, String, ReflectionInfo?)
  fullName.vb: Pie.ShaderCompiler.CompilerResult.New(Byte(), Boolean, String, Pie.ShaderCompiler.ReflectionInfo?)
  name.vb: New(Byte(), Boolean, String, ReflectionInfo?)
references:
- uid: Pie.ShaderCompiler
  commentId: N:Pie.ShaderCompiler
  name: Pie.ShaderCompiler
  nameWithType: Pie.ShaderCompiler
  fullName: Pie.ShaderCompiler
  spec.csharp:
  - uid: Pie
    name: Pie
  - name: .
  - uid: Pie.ShaderCompiler
    name: ShaderCompiler
  spec.vb:
  - uid: Pie
    name: Pie
  - name: .
  - uid: Pie.ShaderCompiler
    name: ShaderCompiler
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Pie.ShaderCompiler.CompilerResult.IsSuccess
  commentId: F:Pie.ShaderCompiler.CompilerResult.IsSuccess
  isExternal: true
- uid: System.Byte[]
  isExternal: true
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
  - name: (
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Pie.ShaderCompiler.CompilerResult.ReflectionInfo
  commentId: F:Pie.ShaderCompiler.CompilerResult.ReflectionInfo
  isExternal: true
- uid: System.Nullable{Pie.ShaderCompiler.ReflectionInfo}
  commentId: T:System.Nullable{Pie.ShaderCompiler.ReflectionInfo}
  parent: System
  definition: System.Nullable`1
  name: ReflectionInfo?
  nameWithType: ReflectionInfo?
  fullName: Pie.ShaderCompiler.ReflectionInfo?
  spec.csharp:
  - uid: Pie.ShaderCompiler.ReflectionInfo
    name: ReflectionInfo
  - name: '?'
  spec.vb:
  - uid: Pie.ShaderCompiler.ReflectionInfo
    name: ReflectionInfo
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Pie.ShaderCompiler.CompilerResult
  commentId: T:Pie.ShaderCompiler.CompilerResult
  parent: Pie.ShaderCompiler
  name: CompilerResult
  nameWithType: CompilerResult
  fullName: Pie.ShaderCompiler.CompilerResult
- uid: Pie.ShaderCompiler.CompilerResult.#ctor*
  commentId: Overload:Pie.ShaderCompiler.CompilerResult.#ctor
  name: CompilerResult
  nameWithType: CompilerResult.CompilerResult
  fullName: Pie.ShaderCompiler.CompilerResult.CompilerResult
  nameWithType.vb: CompilerResult.New
  fullName.vb: Pie.ShaderCompiler.CompilerResult.New
  name.vb: New
