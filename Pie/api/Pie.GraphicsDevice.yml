### YamlMime:ManagedReference
items:
- uid: Pie.GraphicsDevice
  commentId: T:Pie.GraphicsDevice
  id: GraphicsDevice
  parent: Pie
  children:
  - Pie.GraphicsDevice.Adapter
  - Pie.GraphicsDevice.Api
  - Pie.GraphicsDevice.Clear(Pie.ClearFlags)
  - Pie.GraphicsDevice.Clear(System.Drawing.Color,Pie.ClearFlags)
  - Pie.GraphicsDevice.Clear(System.Numerics.Vector4,Pie.ClearFlags)
  - Pie.GraphicsDevice.CreateBlendState(Pie.BlendStateDescription)
  - Pie.GraphicsDevice.CreateBuffer(Pie.BufferType,System.UInt32,System.Boolean)
  - Pie.GraphicsDevice.CreateBuffer(Pie.BufferType,System.UInt32,System.IntPtr,System.Boolean)
  - Pie.GraphicsDevice.CreateBuffer(Pie.BufferType,System.UInt32,System.Void*,System.Boolean)
  - Pie.GraphicsDevice.CreateBuffer``1(Pie.BufferType,``0,System.Boolean)
  - Pie.GraphicsDevice.CreateBuffer``1(Pie.BufferType,``0[],System.Boolean)
  - Pie.GraphicsDevice.CreateD3D11(System.IntPtr,System.Drawing.Size,Pie.GraphicsDeviceOptions)
  - Pie.GraphicsDevice.CreateDepthState(Pie.DepthStateDescription)
  - Pie.GraphicsDevice.CreateFramebuffer(Pie.FramebufferAttachment[])
  - Pie.GraphicsDevice.CreateInputLayout(Pie.InputLayoutDescription[])
  - Pie.GraphicsDevice.CreateOpenGL(IGLContext,System.Drawing.Size,Pie.GraphicsDeviceOptions)
  - Pie.GraphicsDevice.CreateRasterizerState(Pie.RasterizerStateDescription)
  - Pie.GraphicsDevice.CreateSamplerState(Pie.SamplerStateDescription)
  - Pie.GraphicsDevice.CreateShader(Pie.ShaderAttachment[])
  - Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription,System.IntPtr)
  - Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription,System.Void*)
  - Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription)
  - Pie.GraphicsDevice.CreateTexture``1(Pie.TextureDescription,``0[])
  - Pie.GraphicsDevice.CreateTexture``1(Pie.TextureDescription,``0[][])
  - Pie.GraphicsDevice.CreateVulkan
  - Pie.GraphicsDevice.Dispatch(System.UInt32,System.UInt32,System.UInt32)
  - Pie.GraphicsDevice.Dispose
  - Pie.GraphicsDevice.Draw(System.UInt32,System.Int32)
  - Pie.GraphicsDevice.Draw(System.UInt32)
  - Pie.GraphicsDevice.DrawIndexed(System.UInt32,System.Int32,System.Int32)
  - Pie.GraphicsDevice.DrawIndexed(System.UInt32,System.Int32)
  - Pie.GraphicsDevice.DrawIndexed(System.UInt32)
  - Pie.GraphicsDevice.DrawIndexedInstanced(System.UInt32,System.UInt32)
  - Pie.GraphicsDevice.Flush
  - Pie.GraphicsDevice.GenerateMipmaps(Pie.Texture)
  - Pie.GraphicsDevice.GetBestApiForPlatform
  - Pie.GraphicsDevice.MapBuffer(Pie.GraphicsBuffer,Pie.MapMode)
  - Pie.GraphicsDevice.Present(System.Int32)
  - Pie.GraphicsDevice.ResizeSwapchain(System.Drawing.Size)
  - Pie.GraphicsDevice.Scissor
  - Pie.GraphicsDevice.SetBlendState(Pie.BlendState)
  - Pie.GraphicsDevice.SetDepthState(Pie.DepthState)
  - Pie.GraphicsDevice.SetFramebuffer(Pie.Framebuffer)
  - Pie.GraphicsDevice.SetIndexBuffer(Pie.GraphicsBuffer,Pie.IndexType)
  - Pie.GraphicsDevice.SetPrimitiveType(Pie.PrimitiveType)
  - Pie.GraphicsDevice.SetRasterizerState(Pie.RasterizerState)
  - Pie.GraphicsDevice.SetShader(Pie.Shader)
  - Pie.GraphicsDevice.SetTexture(System.UInt32,Pie.Texture,Pie.SamplerState)
  - Pie.GraphicsDevice.SetUniformBuffer(System.UInt32,Pie.GraphicsBuffer)
  - Pie.GraphicsDevice.SetVertexBuffer(System.UInt32,Pie.GraphicsBuffer,System.UInt32,Pie.InputLayout)
  - Pie.GraphicsDevice.Swapchain
  - Pie.GraphicsDevice.UnmapBuffer(Pie.GraphicsBuffer)
  - Pie.GraphicsDevice.UpdateBuffer(Pie.GraphicsBuffer,System.UInt32,System.UInt32,System.IntPtr)
  - Pie.GraphicsDevice.UpdateBuffer(Pie.GraphicsBuffer,System.UInt32,System.UInt32,System.Void*)
  - Pie.GraphicsDevice.UpdateBuffer``1(Pie.GraphicsBuffer,System.UInt32,``0)
  - Pie.GraphicsDevice.UpdateBuffer``1(Pie.GraphicsBuffer,System.UInt32,``0[])
  - Pie.GraphicsDevice.UpdateTexture(Pie.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)
  - Pie.GraphicsDevice.UpdateTexture(Pie.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)
  - Pie.GraphicsDevice.UpdateTexture``1(Pie.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[])
  - Pie.GraphicsDevice.Viewport
  langs:
  - csharp
  - vb
  name: GraphicsDevice
  nameWithType: GraphicsDevice
  fullName: Pie.GraphicsDevice
  type: Class
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: GraphicsDevice
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 14
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nA Pie Graphics Device provides all the rendering functions for a given physical graphics device.\n"
  example: []
  syntax:
    content: 'public abstract class GraphicsDevice : IDisposable'
    content.vb: Public MustInherit Class GraphicsDevice Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Pie.GraphicsDevice.Api
  commentId: P:Pie.GraphicsDevice.Api
  id: Api
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Api
  nameWithType: GraphicsDevice.Api
  fullName: Pie.GraphicsDevice.Api
  type: Property
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Api
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 19
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nGet the <xref href=\"Pie.GraphicsApi\" data-throw-if-not-resolved=\"false\"></xref> this device is using.\n"
  example: []
  syntax:
    content: public abstract GraphicsApi Api { get; }
    parameters: []
    return:
      type: Pie.GraphicsApi
    content.vb: Public MustOverride ReadOnly Property Api As GraphicsApi
  overload: Pie.GraphicsDevice.Api*
- uid: Pie.GraphicsDevice.Swapchain
  commentId: P:Pie.GraphicsDevice.Swapchain
  id: Swapchain
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Swapchain
  nameWithType: GraphicsDevice.Swapchain
  fullName: Pie.GraphicsDevice.Swapchain
  type: Property
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Swapchain
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 24
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nGet the <xref href=\"Pie.GraphicsDevice.Swapchain\" data-throw-if-not-resolved=\"false\"></xref> of this device.\n"
  example: []
  syntax:
    content: public abstract Swapchain Swapchain { get; }
    parameters: []
    return:
      type: Pie.Swapchain
    content.vb: Public MustOverride ReadOnly Property Swapchain As Swapchain
  overload: Pie.GraphicsDevice.Swapchain*
- uid: Pie.GraphicsDevice.Adapter
  commentId: P:Pie.GraphicsDevice.Adapter
  id: Adapter
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Adapter
  nameWithType: GraphicsDevice.Adapter
  fullName: Pie.GraphicsDevice.Adapter
  type: Property
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Adapter
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 29
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nThe <xref href=\"Pie.GraphicsAdapter\" data-throw-if-not-resolved=\"false\"></xref> this device is running on.\n"
  example: []
  syntax:
    content: public abstract GraphicsAdapter Adapter { get; }
    parameters: []
    return:
      type: Pie.GraphicsAdapter
    content.vb: Public MustOverride ReadOnly Property Adapter As GraphicsAdapter
  overload: Pie.GraphicsDevice.Adapter*
- uid: Pie.GraphicsDevice.Viewport
  commentId: P:Pie.GraphicsDevice.Viewport
  id: Viewport
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Viewport
  nameWithType: GraphicsDevice.Viewport
  fullName: Pie.GraphicsDevice.Viewport
  type: Property
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Viewport
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 34
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nGet or set the viewport of this device.\n"
  example: []
  syntax:
    content: public abstract Rectangle Viewport { get; set; }
    parameters: []
    return:
      type: System.Drawing.Rectangle
    content.vb: Public MustOverride Property Viewport As Rectangle
  overload: Pie.GraphicsDevice.Viewport*
- uid: Pie.GraphicsDevice.Scissor
  commentId: P:Pie.GraphicsDevice.Scissor
  id: Scissor
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Scissor
  nameWithType: GraphicsDevice.Scissor
  fullName: Pie.GraphicsDevice.Scissor
  type: Property
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Scissor
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 39
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nGet or set the scissor rectangle of this device.\n"
  example: []
  syntax:
    content: public abstract Rectangle Scissor { get; set; }
    parameters: []
    return:
      type: System.Drawing.Rectangle
    content.vb: Public MustOverride Property Scissor As Rectangle
  overload: Pie.GraphicsDevice.Scissor*
- uid: Pie.GraphicsDevice.Clear(System.Drawing.Color,Pie.ClearFlags)
  commentId: M:Pie.GraphicsDevice.Clear(System.Drawing.Color,Pie.ClearFlags)
  id: Clear(System.Drawing.Color,Pie.ClearFlags)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Clear(Color, ClearFlags)
  nameWithType: GraphicsDevice.Clear(Color, ClearFlags)
  fullName: Pie.GraphicsDevice.Clear(System.Drawing.Color, Pie.ClearFlags)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Clear
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 46
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nClears the set Framebuffer with the given color and flags. If no framebuffer is set, this clears the back buffer.\n"
  example: []
  syntax:
    content: public abstract void Clear(Color color, ClearFlags flags = ClearFlags.None)
    parameters:
    - id: color
      type: System.Drawing.Color
      description: The color to clear with.
    - id: flags
      type: Pie.ClearFlags
      description: The flags for clearing other bits.
    content.vb: Public MustOverride Sub Clear(color As Color, flags As ClearFlags = ClearFlags.None)
  overload: Pie.GraphicsDevice.Clear*
- uid: Pie.GraphicsDevice.Clear(System.Numerics.Vector4,Pie.ClearFlags)
  commentId: M:Pie.GraphicsDevice.Clear(System.Numerics.Vector4,Pie.ClearFlags)
  id: Clear(System.Numerics.Vector4,Pie.ClearFlags)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Clear(Vector4, ClearFlags)
  nameWithType: GraphicsDevice.Clear(Vector4, ClearFlags)
  fullName: Pie.GraphicsDevice.Clear(System.Numerics.Vector4, Pie.ClearFlags)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Clear
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 54
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nClears the set Framebuffer with the given normalized color and flags. If no framebuffer is set, this clears the\nback buffer.\n"
  example: []
  syntax:
    content: public abstract void Clear(Vector4 color, ClearFlags flags = ClearFlags.None)
    parameters:
    - id: color
      type: System.Numerics.Vector4
      description: The color to clear with.
    - id: flags
      type: Pie.ClearFlags
      description: The flags for clearing other bits.
    content.vb: Public MustOverride Sub Clear(color As Vector4, flags As ClearFlags = ClearFlags.None)
  overload: Pie.GraphicsDevice.Clear*
- uid: Pie.GraphicsDevice.Clear(Pie.ClearFlags)
  commentId: M:Pie.GraphicsDevice.Clear(Pie.ClearFlags)
  id: Clear(Pie.ClearFlags)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Clear(ClearFlags)
  nameWithType: GraphicsDevice.Clear(ClearFlags)
  fullName: Pie.GraphicsDevice.Clear(Pie.ClearFlags)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Clear
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 60
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nClears the set Framebuffer with the given flags. If no framebuffer is set, this clears the back buffer.\n"
  example: []
  syntax:
    content: public abstract void Clear(ClearFlags flags)
    parameters:
    - id: flags
      type: Pie.ClearFlags
      description: The flags for clearing bits.
    content.vb: Public MustOverride Sub Clear(flags As ClearFlags)
  overload: Pie.GraphicsDevice.Clear*
- uid: Pie.GraphicsDevice.CreateBuffer``1(Pie.BufferType,``0[],System.Boolean)
  commentId: M:Pie.GraphicsDevice.CreateBuffer``1(Pie.BufferType,``0[],System.Boolean)
  id: CreateBuffer``1(Pie.BufferType,``0[],System.Boolean)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateBuffer<T>(BufferType, T[], bool)
  nameWithType: GraphicsDevice.CreateBuffer<T>(BufferType, T[], bool)
  fullName: Pie.GraphicsDevice.CreateBuffer<T>(Pie.BufferType, T[], bool)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 70
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a graphics buffer with the given type and data.\n"
  example: []
  syntax:
    content: 'public abstract GraphicsBuffer CreateBuffer<T>(BufferType bufferType, T[] data, bool dynamic = false) where T : unmanaged'
    parameters:
    - id: bufferType
      type: Pie.BufferType
      description: The type of buffer that should be created.
    - id: data
      type: '{T}[]'
      description: The data itself.
    - id: dynamic
      type: System.Boolean
      description: Whether or not this buffer is dynamic.
    typeParameters:
    - id: T
      description: Any unmanaged type.
    return:
      type: Pie.GraphicsBuffer
      description: The created graphics buffer.
    content.vb: Public MustOverride Function CreateBuffer(Of T As Structure)(bufferType As BufferType, data As T(), dynamic As Boolean = False) As GraphicsBuffer
  overload: Pie.GraphicsDevice.CreateBuffer*
  nameWithType.vb: GraphicsDevice.CreateBuffer(Of T)(BufferType, T(), Boolean)
  fullName.vb: Pie.GraphicsDevice.CreateBuffer(Of T)(Pie.BufferType, T(), Boolean)
  name.vb: CreateBuffer(Of T)(BufferType, T(), Boolean)
- uid: Pie.GraphicsDevice.CreateBuffer``1(Pie.BufferType,``0,System.Boolean)
  commentId: M:Pie.GraphicsDevice.CreateBuffer``1(Pie.BufferType,``0,System.Boolean)
  id: CreateBuffer``1(Pie.BufferType,``0,System.Boolean)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateBuffer<T>(BufferType, T, bool)
  nameWithType: GraphicsDevice.CreateBuffer<T>(BufferType, T, bool)
  fullName: Pie.GraphicsDevice.CreateBuffer<T>(Pie.BufferType, T, bool)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 80
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a graphics buffer with the given type and data.\n"
  example: []
  syntax:
    content: 'public abstract GraphicsBuffer CreateBuffer<T>(BufferType bufferType, T data, bool dynamic = false) where T : unmanaged'
    parameters:
    - id: bufferType
      type: Pie.BufferType
      description: The type of buffer that should be created.
    - id: data
      type: '{T}'
      description: The data itself.
    - id: dynamic
      type: System.Boolean
      description: Whether or not this buffer is dynamic.
    typeParameters:
    - id: T
      description: Any unmanaged type.
    return:
      type: Pie.GraphicsBuffer
      description: The created graphics buffer.
    content.vb: Public MustOverride Function CreateBuffer(Of T As Structure)(bufferType As BufferType, data As T, dynamic As Boolean = False) As GraphicsBuffer
  overload: Pie.GraphicsDevice.CreateBuffer*
  nameWithType.vb: GraphicsDevice.CreateBuffer(Of T)(BufferType, T, Boolean)
  fullName.vb: Pie.GraphicsDevice.CreateBuffer(Of T)(Pie.BufferType, T, Boolean)
  name.vb: CreateBuffer(Of T)(BufferType, T, Boolean)
- uid: Pie.GraphicsDevice.CreateBuffer(Pie.BufferType,System.UInt32,System.Boolean)
  commentId: M:Pie.GraphicsDevice.CreateBuffer(Pie.BufferType,System.UInt32,System.Boolean)
  id: CreateBuffer(Pie.BufferType,System.UInt32,System.Boolean)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateBuffer(BufferType, uint, bool)
  nameWithType: GraphicsDevice.CreateBuffer(BufferType, uint, bool)
  fullName: Pie.GraphicsDevice.CreateBuffer(Pie.BufferType, uint, bool)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 89
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate an empty graphics buffer with the given size.\n"
  example: []
  syntax:
    content: public abstract GraphicsBuffer CreateBuffer(BufferType bufferType, uint sizeInBytes, bool dynamic = false)
    parameters:
    - id: bufferType
      type: Pie.BufferType
      description: The type of buffer that should be created.
    - id: sizeInBytes
      type: System.UInt32
      description: The size, in bytes, that this buffer should be.
    - id: dynamic
      type: System.Boolean
      description: Whether or not this buffer is dynamic.
    return:
      type: Pie.GraphicsBuffer
      description: The created graphics buffer.
    content.vb: Public MustOverride Function CreateBuffer(bufferType As BufferType, sizeInBytes As UInteger, dynamic As Boolean = False) As GraphicsBuffer
  overload: Pie.GraphicsDevice.CreateBuffer*
  nameWithType.vb: GraphicsDevice.CreateBuffer(BufferType, UInteger, Boolean)
  fullName.vb: Pie.GraphicsDevice.CreateBuffer(Pie.BufferType, UInteger, Boolean)
  name.vb: CreateBuffer(BufferType, UInteger, Boolean)
- uid: Pie.GraphicsDevice.CreateBuffer(Pie.BufferType,System.UInt32,System.IntPtr,System.Boolean)
  commentId: M:Pie.GraphicsDevice.CreateBuffer(Pie.BufferType,System.UInt32,System.IntPtr,System.Boolean)
  id: CreateBuffer(Pie.BufferType,System.UInt32,System.IntPtr,System.Boolean)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateBuffer(BufferType, uint, IntPtr, bool)
  nameWithType: GraphicsDevice.CreateBuffer(BufferType, uint, IntPtr, bool)
  fullName: Pie.GraphicsDevice.CreateBuffer(Pie.BufferType, uint, System.IntPtr, bool)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 99
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a graphics buffer with the given type and data.\n"
  example: []
  syntax:
    content: public abstract GraphicsBuffer CreateBuffer(BufferType bufferType, uint sizeInBytes, IntPtr data, bool dynamic = false)
    parameters:
    - id: bufferType
      type: Pie.BufferType
      description: The type of buffer that should be created.
    - id: sizeInBytes
      type: System.UInt32
      description: The size, in bytes, that this buffer should be.
    - id: data
      type: System.IntPtr
      description: The data pointer.
    - id: dynamic
      type: System.Boolean
      description: Whether or not this buffer is dynamic.
    return:
      type: Pie.GraphicsBuffer
      description: The created graphics buffer.
    content.vb: Public MustOverride Function CreateBuffer(bufferType As BufferType, sizeInBytes As UInteger, data As IntPtr, dynamic As Boolean = False) As GraphicsBuffer
  overload: Pie.GraphicsDevice.CreateBuffer*
  nameWithType.vb: GraphicsDevice.CreateBuffer(BufferType, UInteger, IntPtr, Boolean)
  fullName.vb: Pie.GraphicsDevice.CreateBuffer(Pie.BufferType, UInteger, System.IntPtr, Boolean)
  name.vb: CreateBuffer(BufferType, UInteger, IntPtr, Boolean)
- uid: Pie.GraphicsDevice.CreateBuffer(Pie.BufferType,System.UInt32,System.Void*,System.Boolean)
  commentId: M:Pie.GraphicsDevice.CreateBuffer(Pie.BufferType,System.UInt32,System.Void*,System.Boolean)
  id: CreateBuffer(Pie.BufferType,System.UInt32,System.Void*,System.Boolean)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateBuffer(BufferType, uint, void*, bool)
  nameWithType: GraphicsDevice.CreateBuffer(BufferType, uint, void*, bool)
  fullName: Pie.GraphicsDevice.CreateBuffer(Pie.BufferType, uint, void*, bool)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 109
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a graphics buffer with the given type and data.\n"
  example: []
  syntax:
    content: public abstract GraphicsBuffer CreateBuffer(BufferType bufferType, uint sizeInBytes, void* data, bool dynamic = false)
    parameters:
    - id: bufferType
      type: Pie.BufferType
      description: The type of buffer that should be created.
    - id: sizeInBytes
      type: System.UInt32
      description: The size, in bytes, that this buffer should be.
    - id: data
      type: System.Void*
      description: The data pointer.
    - id: dynamic
      type: System.Boolean
      description: Whether or not this buffer is dynamic.
    return:
      type: Pie.GraphicsBuffer
      description: The created graphics buffer.
    content.vb: Public MustOverride Function CreateBuffer(bufferType As BufferType, sizeInBytes As UInteger, data As Void*, dynamic As Boolean = False) As GraphicsBuffer
  overload: Pie.GraphicsDevice.CreateBuffer*
  nameWithType.vb: GraphicsDevice.CreateBuffer(BufferType, UInteger, Void*, Boolean)
  fullName.vb: Pie.GraphicsDevice.CreateBuffer(Pie.BufferType, UInteger, Void*, Boolean)
  name.vb: CreateBuffer(BufferType, UInteger, Void*, Boolean)
- uid: Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription)
  commentId: M:Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription)
  id: CreateTexture(Pie.TextureDescription)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateTexture(TextureDescription)
  nameWithType: GraphicsDevice.CreateTexture(TextureDescription)
  fullName: Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateTexture
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 116
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate an empty texture with the given description.\n"
  example: []
  syntax:
    content: public abstract Texture CreateTexture(TextureDescription description)
    parameters:
    - id: description
      type: Pie.TextureDescription
      description: The description of the texture.
    return:
      type: Pie.Texture
      description: The created texture.
    content.vb: Public MustOverride Function CreateTexture(description As TextureDescription) As Texture
  overload: Pie.GraphicsDevice.CreateTexture*
- uid: Pie.GraphicsDevice.CreateTexture``1(Pie.TextureDescription,``0[])
  commentId: M:Pie.GraphicsDevice.CreateTexture``1(Pie.TextureDescription,``0[])
  id: CreateTexture``1(Pie.TextureDescription,``0[])
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateTexture<T>(TextureDescription, T[])
  nameWithType: GraphicsDevice.CreateTexture<T>(TextureDescription, T[])
  fullName: Pie.GraphicsDevice.CreateTexture<T>(Pie.TextureDescription, T[])
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateTexture
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 125
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a texture with the given description and data.\n"
  example: []
  syntax:
    content: 'public abstract Texture CreateTexture<T>(TextureDescription description, T[] data) where T : unmanaged'
    parameters:
    - id: description
      type: Pie.TextureDescription
      description: The description of the texture.
    - id: data
      type: '{T}[]'
      description: The initial data of the texture.
    typeParameters:
    - id: T
      description: The data type, typically byte or float. This type should match the <xref href="Pie.Format" data-throw-if-not-resolved="false"></xref> in the <code data-dev-comment-type="paramref" class="paramref">description</code>.
    return:
      type: Pie.Texture
      description: The created texture.
    content.vb: Public MustOverride Function CreateTexture(Of T As Structure)(description As TextureDescription, data As T()) As Texture
  overload: Pie.GraphicsDevice.CreateTexture*
  nameWithType.vb: GraphicsDevice.CreateTexture(Of T)(TextureDescription, T())
  fullName.vb: Pie.GraphicsDevice.CreateTexture(Of T)(Pie.TextureDescription, T())
  name.vb: CreateTexture(Of T)(TextureDescription, T())
- uid: Pie.GraphicsDevice.CreateTexture``1(Pie.TextureDescription,``0[][])
  commentId: M:Pie.GraphicsDevice.CreateTexture``1(Pie.TextureDescription,``0[][])
  id: CreateTexture``1(Pie.TextureDescription,``0[][])
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateTexture<T>(TextureDescription, T[][])
  nameWithType: GraphicsDevice.CreateTexture<T>(TextureDescription, T[][])
  fullName: Pie.GraphicsDevice.CreateTexture<T>(Pie.TextureDescription, T[][])
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateTexture
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 135
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a texture with the given description and <strong>array</strong> data.\n"
  remarks: As this takes in array data, this method should only be used with array textures and cubemaps.
  example: []
  syntax:
    content: 'public abstract Texture CreateTexture<T>(TextureDescription description, T[][] data) where T : unmanaged'
    parameters:
    - id: description
      type: Pie.TextureDescription
      description: The description of the texture.
    - id: data
      type: '{T}[][]'
      description: The initial array data of the texture.
    typeParameters:
    - id: T
      description: The data type, typically byte or float. This type should match the <xref href="Pie.Format" data-throw-if-not-resolved="false"></xref> in the <code data-dev-comment-type="paramref" class="paramref">description</code>.
    return:
      type: Pie.Texture
      description: The created texture.
    content.vb: Public MustOverride Function CreateTexture(Of T As Structure)(description As TextureDescription, data As T()()) As Texture
  overload: Pie.GraphicsDevice.CreateTexture*
  nameWithType.vb: GraphicsDevice.CreateTexture(Of T)(TextureDescription, T()())
  fullName.vb: Pie.GraphicsDevice.CreateTexture(Of T)(Pie.TextureDescription, T()())
  name.vb: CreateTexture(Of T)(TextureDescription, T()())
- uid: Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription,System.IntPtr)
  commentId: M:Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription,System.IntPtr)
  id: CreateTexture(Pie.TextureDescription,System.IntPtr)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateTexture(TextureDescription, IntPtr)
  nameWithType: GraphicsDevice.CreateTexture(TextureDescription, IntPtr)
  fullName: Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription, System.IntPtr)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateTexture
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 143
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a texture with the given description and data.\n"
  example: []
  syntax:
    content: public abstract Texture CreateTexture(TextureDescription description, IntPtr data)
    parameters:
    - id: description
      type: Pie.TextureDescription
      description: The description of the texture.
    - id: data
      type: System.IntPtr
      description: The pointer to the data.
    return:
      type: Pie.Texture
      description: The created texture.
    content.vb: Public MustOverride Function CreateTexture(description As TextureDescription, data As IntPtr) As Texture
  overload: Pie.GraphicsDevice.CreateTexture*
- uid: Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription,System.Void*)
  commentId: M:Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription,System.Void*)
  id: CreateTexture(Pie.TextureDescription,System.Void*)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateTexture(TextureDescription, void*)
  nameWithType: GraphicsDevice.CreateTexture(TextureDescription, void*)
  fullName: Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription, void*)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateTexture
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 151
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a texture with the given description and data.\n"
  example: []
  syntax:
    content: public abstract Texture CreateTexture(TextureDescription description, void* data)
    parameters:
    - id: description
      type: Pie.TextureDescription
      description: The description of the texture.
    - id: data
      type: System.Void*
      description: The pointer to the data.
    return:
      type: Pie.Texture
      description: The created texture.
    content.vb: Public MustOverride Function CreateTexture(description As TextureDescription, data As Void*) As Texture
  overload: Pie.GraphicsDevice.CreateTexture*
  nameWithType.vb: GraphicsDevice.CreateTexture(TextureDescription, Void*)
  fullName.vb: Pie.GraphicsDevice.CreateTexture(Pie.TextureDescription, Void*)
  name.vb: CreateTexture(TextureDescription, Void*)
- uid: Pie.GraphicsDevice.CreateShader(Pie.ShaderAttachment[])
  commentId: M:Pie.GraphicsDevice.CreateShader(Pie.ShaderAttachment[])
  id: CreateShader(Pie.ShaderAttachment[])
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateShader(params ShaderAttachment[])
  nameWithType: GraphicsDevice.CreateShader(params ShaderAttachment[])
  fullName: Pie.GraphicsDevice.CreateShader(params Pie.ShaderAttachment[])
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateShader
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 158
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a shader with the given shader attachments.\n"
  example: []
  syntax:
    content: public abstract Shader CreateShader(params ShaderAttachment[] attachments)
    parameters:
    - id: attachments
      type: Pie.ShaderAttachment[]
      description: The attachments for this shader.
    return:
      type: Pie.Shader
      description: The created shader.
    content.vb: Public MustOverride Function CreateShader(ParamArray attachments As ShaderAttachment()) As Shader
  overload: Pie.GraphicsDevice.CreateShader*
  nameWithType.vb: GraphicsDevice.CreateShader(ParamArray ShaderAttachment())
  fullName.vb: Pie.GraphicsDevice.CreateShader(ParamArray Pie.ShaderAttachment())
  name.vb: CreateShader(ParamArray ShaderAttachment())
- uid: Pie.GraphicsDevice.CreateInputLayout(Pie.InputLayoutDescription[])
  commentId: M:Pie.GraphicsDevice.CreateInputLayout(Pie.InputLayoutDescription[])
  id: CreateInputLayout(Pie.InputLayoutDescription[])
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateInputLayout(params InputLayoutDescription[])
  nameWithType: GraphicsDevice.CreateInputLayout(params InputLayoutDescription[])
  fullName: Pie.GraphicsDevice.CreateInputLayout(params Pie.InputLayoutDescription[])
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateInputLayout
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 165
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate an input layout which can be used with a vertex buffer.\n"
  example: []
  syntax:
    content: public abstract InputLayout CreateInputLayout(params InputLayoutDescription[] inputLayoutDescriptions)
    parameters:
    - id: inputLayoutDescriptions
      type: Pie.InputLayoutDescription[]
      description: The descriptions for this layout.
    return:
      type: Pie.InputLayout
      description: The created input layout.
    content.vb: Public MustOverride Function CreateInputLayout(ParamArray inputLayoutDescriptions As InputLayoutDescription()) As InputLayout
  overload: Pie.GraphicsDevice.CreateInputLayout*
  nameWithType.vb: GraphicsDevice.CreateInputLayout(ParamArray InputLayoutDescription())
  fullName.vb: Pie.GraphicsDevice.CreateInputLayout(ParamArray Pie.InputLayoutDescription())
  name.vb: CreateInputLayout(ParamArray InputLayoutDescription())
- uid: Pie.GraphicsDevice.CreateRasterizerState(Pie.RasterizerStateDescription)
  commentId: M:Pie.GraphicsDevice.CreateRasterizerState(Pie.RasterizerStateDescription)
  id: CreateRasterizerState(Pie.RasterizerStateDescription)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateRasterizerState(RasterizerStateDescription)
  nameWithType: GraphicsDevice.CreateRasterizerState(RasterizerStateDescription)
  fullName: Pie.GraphicsDevice.CreateRasterizerState(Pie.RasterizerStateDescription)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateRasterizerState
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 172
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a new rasterizer state from the given description.\n"
  example: []
  syntax:
    content: public abstract RasterizerState CreateRasterizerState(RasterizerStateDescription description)
    parameters:
    - id: description
      type: Pie.RasterizerStateDescription
      description: The rasterizer state description.
    return:
      type: Pie.RasterizerState
      description: The created rasterizer state.
    content.vb: Public MustOverride Function CreateRasterizerState(description As RasterizerStateDescription) As RasterizerState
  overload: Pie.GraphicsDevice.CreateRasterizerState*
- uid: Pie.GraphicsDevice.CreateBlendState(Pie.BlendStateDescription)
  commentId: M:Pie.GraphicsDevice.CreateBlendState(Pie.BlendStateDescription)
  id: CreateBlendState(Pie.BlendStateDescription)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateBlendState(BlendStateDescription)
  nameWithType: GraphicsDevice.CreateBlendState(BlendStateDescription)
  fullName: Pie.GraphicsDevice.CreateBlendState(Pie.BlendStateDescription)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateBlendState
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 179
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a new blend state from the blend state description.\n"
  example: []
  syntax:
    content: public abstract BlendState CreateBlendState(BlendStateDescription description)
    parameters:
    - id: description
      type: Pie.BlendStateDescription
      description: The blend state description to create from.
    return:
      type: Pie.BlendState
      description: The created blend state.
    content.vb: Public MustOverride Function CreateBlendState(description As BlendStateDescription) As BlendState
  overload: Pie.GraphicsDevice.CreateBlendState*
- uid: Pie.GraphicsDevice.CreateDepthState(Pie.DepthStateDescription)
  commentId: M:Pie.GraphicsDevice.CreateDepthState(Pie.DepthStateDescription)
  id: CreateDepthState(Pie.DepthStateDescription)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateDepthState(DepthStateDescription)
  nameWithType: GraphicsDevice.CreateDepthState(DepthStateDescription)
  fullName: Pie.GraphicsDevice.CreateDepthState(Pie.DepthStateDescription)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateDepthState
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 186
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a new depth state from the depth state description.\n"
  example: []
  syntax:
    content: public abstract DepthState CreateDepthState(DepthStateDescription description)
    parameters:
    - id: description
      type: Pie.DepthStateDescription
      description: The depth state description to create from.
    return:
      type: Pie.DepthState
      description: The created depth state.
    content.vb: Public MustOverride Function CreateDepthState(description As DepthStateDescription) As DepthState
  overload: Pie.GraphicsDevice.CreateDepthState*
- uid: Pie.GraphicsDevice.CreateSamplerState(Pie.SamplerStateDescription)
  commentId: M:Pie.GraphicsDevice.CreateSamplerState(Pie.SamplerStateDescription)
  id: CreateSamplerState(Pie.SamplerStateDescription)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateSamplerState(SamplerStateDescription)
  nameWithType: GraphicsDevice.CreateSamplerState(SamplerStateDescription)
  fullName: Pie.GraphicsDevice.CreateSamplerState(Pie.SamplerStateDescription)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateSamplerState
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 193
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a new sampler state from the sampler state description.\n"
  example: []
  syntax:
    content: public abstract SamplerState CreateSamplerState(SamplerStateDescription description)
    parameters:
    - id: description
      type: Pie.SamplerStateDescription
      description: The sampler state description to create from.
    return:
      type: Pie.SamplerState
      description: The created sampler state.
    content.vb: Public MustOverride Function CreateSamplerState(description As SamplerStateDescription) As SamplerState
  overload: Pie.GraphicsDevice.CreateSamplerState*
- uid: Pie.GraphicsDevice.CreateFramebuffer(Pie.FramebufferAttachment[])
  commentId: M:Pie.GraphicsDevice.CreateFramebuffer(Pie.FramebufferAttachment[])
  id: CreateFramebuffer(Pie.FramebufferAttachment[])
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateFramebuffer(params FramebufferAttachment[])
  nameWithType: GraphicsDevice.CreateFramebuffer(params FramebufferAttachment[])
  fullName: Pie.GraphicsDevice.CreateFramebuffer(params Pie.FramebufferAttachment[])
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateFramebuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 200
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a framebuffer, also known as a render target, that can be rendered to.\n"
  example: []
  syntax:
    content: public abstract Framebuffer CreateFramebuffer(params FramebufferAttachment[] attachments)
    parameters:
    - id: attachments
      type: Pie.FramebufferAttachment[]
      description: The framebuffer attachments to attach.
    return:
      type: Pie.Framebuffer
      description: The created framebuffer.
    content.vb: Public MustOverride Function CreateFramebuffer(ParamArray attachments As FramebufferAttachment()) As Framebuffer
  overload: Pie.GraphicsDevice.CreateFramebuffer*
  nameWithType.vb: GraphicsDevice.CreateFramebuffer(ParamArray FramebufferAttachment())
  fullName.vb: Pie.GraphicsDevice.CreateFramebuffer(ParamArray Pie.FramebufferAttachment())
  name.vb: CreateFramebuffer(ParamArray FramebufferAttachment())
- uid: Pie.GraphicsDevice.UpdateBuffer``1(Pie.GraphicsBuffer,System.UInt32,``0[])
  commentId: M:Pie.GraphicsDevice.UpdateBuffer``1(Pie.GraphicsBuffer,System.UInt32,``0[])
  id: UpdateBuffer``1(Pie.GraphicsBuffer,System.UInt32,``0[])
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: UpdateBuffer<T>(GraphicsBuffer, uint, T[])
  nameWithType: GraphicsDevice.UpdateBuffer<T>(GraphicsBuffer, uint, T[])
  fullName: Pie.GraphicsDevice.UpdateBuffer<T>(Pie.GraphicsBuffer, uint, T[])
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: UpdateBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 209
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nUpdate the given buffer with the given data at the given offset in bytes.\n"
  example: []
  syntax:
    content: 'public abstract void UpdateBuffer<T>(GraphicsBuffer buffer, uint offsetInBytes, T[] data) where T : unmanaged'
    parameters:
    - id: buffer
      type: Pie.GraphicsBuffer
      description: The buffer to update.
    - id: offsetInBytes
      type: System.UInt32
      description: The offset in bytes, if any, where the data will be updated.
    - id: data
      type: '{T}[]'
      description: The data itself.
    typeParameters:
    - id: T
      description: Any unmanaged type.
    content.vb: Public MustOverride Sub UpdateBuffer(Of T As Structure)(buffer As GraphicsBuffer, offsetInBytes As UInteger, data As T())
  overload: Pie.GraphicsDevice.UpdateBuffer*
  nameWithType.vb: GraphicsDevice.UpdateBuffer(Of T)(GraphicsBuffer, UInteger, T())
  fullName.vb: Pie.GraphicsDevice.UpdateBuffer(Of T)(Pie.GraphicsBuffer, UInteger, T())
  name.vb: UpdateBuffer(Of T)(GraphicsBuffer, UInteger, T())
- uid: Pie.GraphicsDevice.UpdateBuffer``1(Pie.GraphicsBuffer,System.UInt32,``0)
  commentId: M:Pie.GraphicsDevice.UpdateBuffer``1(Pie.GraphicsBuffer,System.UInt32,``0)
  id: UpdateBuffer``1(Pie.GraphicsBuffer,System.UInt32,``0)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: UpdateBuffer<T>(GraphicsBuffer, uint, T)
  nameWithType: GraphicsDevice.UpdateBuffer<T>(GraphicsBuffer, uint, T)
  fullName: Pie.GraphicsDevice.UpdateBuffer<T>(Pie.GraphicsBuffer, uint, T)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: UpdateBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 218
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nUpdate the given buffer with the given data at the given offset in bytes.\n"
  example: []
  syntax:
    content: 'public abstract void UpdateBuffer<T>(GraphicsBuffer buffer, uint offsetInBytes, T data) where T : unmanaged'
    parameters:
    - id: buffer
      type: Pie.GraphicsBuffer
      description: The buffer to update.
    - id: offsetInBytes
      type: System.UInt32
      description: The offset in bytes, if any, where the data will be updated.
    - id: data
      type: '{T}'
      description: The data itself.
    typeParameters:
    - id: T
      description: Any unmanaged type.
    content.vb: Public MustOverride Sub UpdateBuffer(Of T As Structure)(buffer As GraphicsBuffer, offsetInBytes As UInteger, data As T)
  overload: Pie.GraphicsDevice.UpdateBuffer*
  nameWithType.vb: GraphicsDevice.UpdateBuffer(Of T)(GraphicsBuffer, UInteger, T)
  fullName.vb: Pie.GraphicsDevice.UpdateBuffer(Of T)(Pie.GraphicsBuffer, UInteger, T)
  name.vb: UpdateBuffer(Of T)(GraphicsBuffer, UInteger, T)
- uid: Pie.GraphicsDevice.UpdateBuffer(Pie.GraphicsBuffer,System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:Pie.GraphicsDevice.UpdateBuffer(Pie.GraphicsBuffer,System.UInt32,System.UInt32,System.IntPtr)
  id: UpdateBuffer(Pie.GraphicsBuffer,System.UInt32,System.UInt32,System.IntPtr)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: UpdateBuffer(GraphicsBuffer, uint, uint, IntPtr)
  nameWithType: GraphicsDevice.UpdateBuffer(GraphicsBuffer, uint, uint, IntPtr)
  fullName: Pie.GraphicsDevice.UpdateBuffer(Pie.GraphicsBuffer, uint, uint, System.IntPtr)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: UpdateBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 227
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nUpdate the given buffer with the given data at the given offset in bytes.\n"
  example: []
  syntax:
    content: public abstract void UpdateBuffer(GraphicsBuffer buffer, uint offsetInBytes, uint sizeInBytes, IntPtr data)
    parameters:
    - id: buffer
      type: Pie.GraphicsBuffer
      description: The buffer to update.
    - id: offsetInBytes
      type: System.UInt32
      description: The offset in bytes, if any, where the data will be updated.
    - id: sizeInBytes
      type: System.UInt32
      description: The size in bytes of the data.
    - id: data
      type: System.IntPtr
      description: The data pointer.
    content.vb: Public MustOverride Sub UpdateBuffer(buffer As GraphicsBuffer, offsetInBytes As UInteger, sizeInBytes As UInteger, data As IntPtr)
  overload: Pie.GraphicsDevice.UpdateBuffer*
  nameWithType.vb: GraphicsDevice.UpdateBuffer(GraphicsBuffer, UInteger, UInteger, IntPtr)
  fullName.vb: Pie.GraphicsDevice.UpdateBuffer(Pie.GraphicsBuffer, UInteger, UInteger, System.IntPtr)
  name.vb: UpdateBuffer(GraphicsBuffer, UInteger, UInteger, IntPtr)
- uid: Pie.GraphicsDevice.UpdateBuffer(Pie.GraphicsBuffer,System.UInt32,System.UInt32,System.Void*)
  commentId: M:Pie.GraphicsDevice.UpdateBuffer(Pie.GraphicsBuffer,System.UInt32,System.UInt32,System.Void*)
  id: UpdateBuffer(Pie.GraphicsBuffer,System.UInt32,System.UInt32,System.Void*)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: UpdateBuffer(GraphicsBuffer, uint, uint, void*)
  nameWithType: GraphicsDevice.UpdateBuffer(GraphicsBuffer, uint, uint, void*)
  fullName: Pie.GraphicsDevice.UpdateBuffer(Pie.GraphicsBuffer, uint, uint, void*)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: UpdateBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 236
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nUpdate the given buffer with the given data at the given offset in bytes.\n"
  example: []
  syntax:
    content: public abstract void UpdateBuffer(GraphicsBuffer buffer, uint offsetInBytes, uint sizeInBytes, void* data)
    parameters:
    - id: buffer
      type: Pie.GraphicsBuffer
      description: The buffer to update.
    - id: offsetInBytes
      type: System.UInt32
      description: The offset in bytes, if any, where the data will be updated.
    - id: sizeInBytes
      type: System.UInt32
      description: The size in bytes of the data.
    - id: data
      type: System.Void*
      description: The data pointer.
    content.vb: Public MustOverride Sub UpdateBuffer(buffer As GraphicsBuffer, offsetInBytes As UInteger, sizeInBytes As UInteger, data As Void*)
  overload: Pie.GraphicsDevice.UpdateBuffer*
  nameWithType.vb: GraphicsDevice.UpdateBuffer(GraphicsBuffer, UInteger, UInteger, Void*)
  fullName.vb: Pie.GraphicsDevice.UpdateBuffer(Pie.GraphicsBuffer, UInteger, UInteger, Void*)
  name.vb: UpdateBuffer(GraphicsBuffer, UInteger, UInteger, Void*)
- uid: Pie.GraphicsDevice.UpdateTexture``1(Pie.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[])
  commentId: M:Pie.GraphicsDevice.UpdateTexture``1(Pie.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[])
  id: UpdateTexture``1(Pie.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[])
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: UpdateTexture<T>(Texture, int, int, int, int, int, int, int, int, T[])
  nameWithType: GraphicsDevice.UpdateTexture<T>(Texture, int, int, int, int, int, int, int, int, T[])
  fullName: Pie.GraphicsDevice.UpdateTexture<T>(Pie.Texture, int, int, int, int, int, int, int, int, T[])
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: UpdateTexture
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 252
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nUpdate a region of this texture with the given data.\n"
  example: []
  syntax:
    content: 'public abstract void UpdateTexture<T>(Texture texture, int mipLevel, int arrayIndex, int x, int y, int z, int width, int height, int depth, T[] data) where T : unmanaged'
    parameters:
    - id: texture
      type: Pie.Texture
      description: The texture to update.
    - id: mipLevel
      type: System.Int32
      description: The mip level to update.
    - id: arrayIndex
      type: System.Int32
      description: The array index to update.
    - id: x
      type: System.Int32
      description: The x-offset in pixels of the data.
    - id: y
      type: System.Int32
      description: The y-offset in pixels of the data.
    - id: z
      type: System.Int32
      description: The z-offset in pixels of the data.
    - id: width
      type: System.Int32
      description: The width in pixels of the data.
    - id: height
      type: System.Int32
      description: The height in pixels of the data.
    - id: depth
      type: System.Int32
      description: The depth in pixels of the texture.
    - id: data
      type: '{T}[]'
      description: The data itself.
    typeParameters:
    - id: T
      description: The data type, typically byte or float. This type should match the <xref href="Pie.Format" data-throw-if-not-resolved="false"></xref> in the texture&apos;s <xref href="Pie.TextureDescription" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public MustOverride Sub UpdateTexture(Of T As Structure)(texture As Texture, mipLevel As Integer, arrayIndex As Integer, x As Integer, y As Integer, z As Integer, width As Integer, height As Integer, depth As Integer, data As T())
  overload: Pie.GraphicsDevice.UpdateTexture*
  nameWithType.vb: GraphicsDevice.UpdateTexture(Of T)(Texture, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, T())
  fullName.vb: Pie.GraphicsDevice.UpdateTexture(Of T)(Pie.Texture, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, T())
  name.vb: UpdateTexture(Of T)(Texture, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, T())
- uid: Pie.GraphicsDevice.UpdateTexture(Pie.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)
  commentId: M:Pie.GraphicsDevice.UpdateTexture(Pie.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)
  id: UpdateTexture(Pie.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: UpdateTexture(Texture, int, int, int, int, int, int, int, int, IntPtr)
  nameWithType: GraphicsDevice.UpdateTexture(Texture, int, int, int, int, int, int, int, int, IntPtr)
  fullName: Pie.GraphicsDevice.UpdateTexture(Pie.Texture, int, int, int, int, int, int, int, int, System.IntPtr)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: UpdateTexture
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 268
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nUpdate a region of this texture with the given data.\n"
  example: []
  syntax:
    content: public abstract void UpdateTexture(Texture texture, int mipLevel, int arrayIndex, int x, int y, int z, int width, int height, int depth, IntPtr data)
    parameters:
    - id: texture
      type: Pie.Texture
      description: The texture to update.
    - id: mipLevel
      type: System.Int32
      description: The mip level to update.
    - id: arrayIndex
      type: System.Int32
      description: The array index to update.
    - id: x
      type: System.Int32
      description: The x-offset in pixels of the data.
    - id: y
      type: System.Int32
      description: The y-offset in pixels of the data.
    - id: z
      type: System.Int32
      description: The z-offset in pixels of the data.
    - id: width
      type: System.Int32
      description: The width in pixels of the data.
    - id: height
      type: System.Int32
      description: The height in pixels of the data.
    - id: depth
      type: System.Int32
      description: The depth in pixels of the texture.
    - id: data
      type: System.IntPtr
      description: The data pointer.
    content.vb: Public MustOverride Sub UpdateTexture(texture As Texture, mipLevel As Integer, arrayIndex As Integer, x As Integer, y As Integer, z As Integer, width As Integer, height As Integer, depth As Integer, data As IntPtr)
  overload: Pie.GraphicsDevice.UpdateTexture*
  nameWithType.vb: GraphicsDevice.UpdateTexture(Texture, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, IntPtr)
  fullName.vb: Pie.GraphicsDevice.UpdateTexture(Pie.Texture, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, System.IntPtr)
  name.vb: UpdateTexture(Texture, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, IntPtr)
- uid: Pie.GraphicsDevice.UpdateTexture(Pie.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)
  commentId: M:Pie.GraphicsDevice.UpdateTexture(Pie.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)
  id: UpdateTexture(Pie.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: UpdateTexture(Texture, int, int, int, int, int, int, int, int, void*)
  nameWithType: GraphicsDevice.UpdateTexture(Texture, int, int, int, int, int, int, int, int, void*)
  fullName: Pie.GraphicsDevice.UpdateTexture(Pie.Texture, int, int, int, int, int, int, int, int, void*)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: UpdateTexture
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 284
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nUpdate a region of this texture with the given data.\n"
  example: []
  syntax:
    content: public abstract void UpdateTexture(Texture texture, int mipLevel, int arrayIndex, int x, int y, int z, int width, int height, int depth, void* data)
    parameters:
    - id: texture
      type: Pie.Texture
      description: The texture to update.
    - id: mipLevel
      type: System.Int32
      description: The mip level to update.
    - id: arrayIndex
      type: System.Int32
      description: The array index to update.
    - id: x
      type: System.Int32
      description: The x-offset in pixels of the data.
    - id: y
      type: System.Int32
      description: The y-offset in pixels of the data.
    - id: z
      type: System.Int32
      description: The z-offset in pixels of the data.
    - id: width
      type: System.Int32
      description: The width in pixels of the data.
    - id: height
      type: System.Int32
      description: The height in pixels of the data.
    - id: depth
      type: System.Int32
      description: The depth in pixels of the texture.
    - id: data
      type: System.Void*
      description: The data pointer.
    content.vb: Public MustOverride Sub UpdateTexture(texture As Texture, mipLevel As Integer, arrayIndex As Integer, x As Integer, y As Integer, z As Integer, width As Integer, height As Integer, depth As Integer, data As Void*)
  overload: Pie.GraphicsDevice.UpdateTexture*
  nameWithType.vb: GraphicsDevice.UpdateTexture(Texture, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Void*)
  fullName.vb: Pie.GraphicsDevice.UpdateTexture(Pie.Texture, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Void*)
  name.vb: UpdateTexture(Texture, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Void*)
- uid: Pie.GraphicsDevice.MapBuffer(Pie.GraphicsBuffer,Pie.MapMode)
  commentId: M:Pie.GraphicsDevice.MapBuffer(Pie.GraphicsBuffer,Pie.MapMode)
  id: MapBuffer(Pie.GraphicsBuffer,Pie.MapMode)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: MapBuffer(GraphicsBuffer, MapMode)
  nameWithType: GraphicsDevice.MapBuffer(GraphicsBuffer, MapMode)
  fullName: Pie.GraphicsDevice.MapBuffer(Pie.GraphicsBuffer, Pie.MapMode)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: MapBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 293
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nMap the given buffer to CPU accessible memory.\n"
  example: []
  syntax:
    content: public abstract IntPtr MapBuffer(GraphicsBuffer buffer, MapMode mode)
    parameters:
    - id: buffer
      type: Pie.GraphicsBuffer
      description: The buffer to map.
    - id: mode
      type: Pie.MapMode
      description: The CPU access mode of this buffer.
    return:
      type: System.IntPtr
      description: The mapped buffer&apos;s data.
    content.vb: Public MustOverride Function MapBuffer(buffer As GraphicsBuffer, mode As MapMode) As IntPtr
  overload: Pie.GraphicsDevice.MapBuffer*
- uid: Pie.GraphicsDevice.UnmapBuffer(Pie.GraphicsBuffer)
  commentId: M:Pie.GraphicsDevice.UnmapBuffer(Pie.GraphicsBuffer)
  id: UnmapBuffer(Pie.GraphicsBuffer)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: UnmapBuffer(GraphicsBuffer)
  nameWithType: GraphicsDevice.UnmapBuffer(GraphicsBuffer)
  fullName: Pie.GraphicsDevice.UnmapBuffer(Pie.GraphicsBuffer)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: UnmapBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 299
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nUnmapped the given mapped buffer.\n"
  example: []
  syntax:
    content: public abstract void UnmapBuffer(GraphicsBuffer buffer)
    parameters:
    - id: buffer
      type: Pie.GraphicsBuffer
      description: The buffer that will be mapped.
    content.vb: Public MustOverride Sub UnmapBuffer(buffer As GraphicsBuffer)
  overload: Pie.GraphicsDevice.UnmapBuffer*
- uid: Pie.GraphicsDevice.SetShader(Pie.Shader)
  commentId: M:Pie.GraphicsDevice.SetShader(Pie.Shader)
  id: SetShader(Pie.Shader)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: SetShader(Shader)
  nameWithType: GraphicsDevice.SetShader(Shader)
  fullName: Pie.GraphicsDevice.SetShader(Pie.Shader)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: SetShader
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 305
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nSet the shader that will be used on next draw.\n"
  example: []
  syntax:
    content: public abstract void SetShader(Shader shader)
    parameters:
    - id: shader
      type: Pie.Shader
      description: The shader to use.
    content.vb: Public MustOverride Sub SetShader(shader As Shader)
  overload: Pie.GraphicsDevice.SetShader*
- uid: Pie.GraphicsDevice.SetTexture(System.UInt32,Pie.Texture,Pie.SamplerState)
  commentId: M:Pie.GraphicsDevice.SetTexture(System.UInt32,Pie.Texture,Pie.SamplerState)
  id: SetTexture(System.UInt32,Pie.Texture,Pie.SamplerState)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: SetTexture(uint, Texture, SamplerState)
  nameWithType: GraphicsDevice.SetTexture(uint, Texture, SamplerState)
  fullName: Pie.GraphicsDevice.SetTexture(uint, Pie.Texture, Pie.SamplerState)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: SetTexture
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 313
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nSet the texture that will be used on next draw.\n"
  example: []
  syntax:
    content: public abstract void SetTexture(uint bindingSlot, Texture texture, SamplerState samplerState)
    parameters:
    - id: bindingSlot
      type: System.UInt32
      description: The binding slot that this texture will be used in.
    - id: texture
      type: Pie.Texture
      description: The texture to use.
    - id: samplerState
      type: Pie.SamplerState
      description: The sampler state to use for this texture.
    content.vb: Public MustOverride Sub SetTexture(bindingSlot As UInteger, texture As Texture, samplerState As SamplerState)
  overload: Pie.GraphicsDevice.SetTexture*
  nameWithType.vb: GraphicsDevice.SetTexture(UInteger, Texture, SamplerState)
  fullName.vb: Pie.GraphicsDevice.SetTexture(UInteger, Pie.Texture, Pie.SamplerState)
  name.vb: SetTexture(UInteger, Texture, SamplerState)
- uid: Pie.GraphicsDevice.SetRasterizerState(Pie.RasterizerState)
  commentId: M:Pie.GraphicsDevice.SetRasterizerState(Pie.RasterizerState)
  id: SetRasterizerState(Pie.RasterizerState)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: SetRasterizerState(RasterizerState)
  nameWithType: GraphicsDevice.SetRasterizerState(RasterizerState)
  fullName: Pie.GraphicsDevice.SetRasterizerState(Pie.RasterizerState)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: SetRasterizerState
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 319
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nSet the rasterizer state that will be used on next draw.\n"
  example: []
  syntax:
    content: public abstract void SetRasterizerState(RasterizerState state)
    parameters:
    - id: state
      type: Pie.RasterizerState
      description: The rasterizer state to use.
    content.vb: Public MustOverride Sub SetRasterizerState(state As RasterizerState)
  overload: Pie.GraphicsDevice.SetRasterizerState*
- uid: Pie.GraphicsDevice.SetBlendState(Pie.BlendState)
  commentId: M:Pie.GraphicsDevice.SetBlendState(Pie.BlendState)
  id: SetBlendState(Pie.BlendState)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: SetBlendState(BlendState)
  nameWithType: GraphicsDevice.SetBlendState(BlendState)
  fullName: Pie.GraphicsDevice.SetBlendState(Pie.BlendState)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: SetBlendState
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 325
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nSet the blend state that will be used on next draw.\n"
  example: []
  syntax:
    content: public abstract void SetBlendState(BlendState state)
    parameters:
    - id: state
      type: Pie.BlendState
      description: The blend state to use.
    content.vb: Public MustOverride Sub SetBlendState(state As BlendState)
  overload: Pie.GraphicsDevice.SetBlendState*
- uid: Pie.GraphicsDevice.SetDepthState(Pie.DepthState)
  commentId: M:Pie.GraphicsDevice.SetDepthState(Pie.DepthState)
  id: SetDepthState(Pie.DepthState)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: SetDepthState(DepthState)
  nameWithType: GraphicsDevice.SetDepthState(DepthState)
  fullName: Pie.GraphicsDevice.SetDepthState(Pie.DepthState)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: SetDepthState
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 331
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nSet the depth state that will be used on next draw.\n"
  example: []
  syntax:
    content: public abstract void SetDepthState(DepthState state)
    parameters:
    - id: state
      type: Pie.DepthState
      description: The depth state to use.
    content.vb: Public MustOverride Sub SetDepthState(state As DepthState)
  overload: Pie.GraphicsDevice.SetDepthState*
- uid: Pie.GraphicsDevice.SetPrimitiveType(Pie.PrimitiveType)
  commentId: M:Pie.GraphicsDevice.SetPrimitiveType(Pie.PrimitiveType)
  id: SetPrimitiveType(Pie.PrimitiveType)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: SetPrimitiveType(PrimitiveType)
  nameWithType: GraphicsDevice.SetPrimitiveType(PrimitiveType)
  fullName: Pie.GraphicsDevice.SetPrimitiveType(Pie.PrimitiveType)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: SetPrimitiveType
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 337
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nSet the primitive type that will be used on next draw.\n"
  example: []
  syntax:
    content: public abstract void SetPrimitiveType(PrimitiveType type)
    parameters:
    - id: type
      type: Pie.PrimitiveType
      description: The primitive type to draw with.
    content.vb: Public MustOverride Sub SetPrimitiveType(type As PrimitiveType)
  overload: Pie.GraphicsDevice.SetPrimitiveType*
- uid: Pie.GraphicsDevice.SetVertexBuffer(System.UInt32,Pie.GraphicsBuffer,System.UInt32,Pie.InputLayout)
  commentId: M:Pie.GraphicsDevice.SetVertexBuffer(System.UInt32,Pie.GraphicsBuffer,System.UInt32,Pie.InputLayout)
  id: SetVertexBuffer(System.UInt32,Pie.GraphicsBuffer,System.UInt32,Pie.InputLayout)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: SetVertexBuffer(uint, GraphicsBuffer, uint, InputLayout)
  nameWithType: GraphicsDevice.SetVertexBuffer(uint, GraphicsBuffer, uint, InputLayout)
  fullName: Pie.GraphicsDevice.SetVertexBuffer(uint, Pie.GraphicsBuffer, uint, Pie.InputLayout)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: SetVertexBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 346
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nSet the vertex buffer that will be used on next draw.\n"
  example: []
  syntax:
    content: public abstract void SetVertexBuffer(uint slot, GraphicsBuffer buffer, uint stride, InputLayout layout)
    parameters:
    - id: slot
      type: System.UInt32
      description: The input slot.
    - id: buffer
      type: Pie.GraphicsBuffer
      description: The buffer to use.
    - id: stride
      type: System.UInt32
      description: The stride, in bytes, for the input layout.
    - id: layout
      type: Pie.InputLayout
      description: The input layout that this vertex buffer will use.
    content.vb: Public MustOverride Sub SetVertexBuffer(slot As UInteger, buffer As GraphicsBuffer, stride As UInteger, layout As InputLayout)
  overload: Pie.GraphicsDevice.SetVertexBuffer*
  nameWithType.vb: GraphicsDevice.SetVertexBuffer(UInteger, GraphicsBuffer, UInteger, InputLayout)
  fullName.vb: Pie.GraphicsDevice.SetVertexBuffer(UInteger, Pie.GraphicsBuffer, UInteger, Pie.InputLayout)
  name.vb: SetVertexBuffer(UInteger, GraphicsBuffer, UInteger, InputLayout)
- uid: Pie.GraphicsDevice.SetIndexBuffer(Pie.GraphicsBuffer,Pie.IndexType)
  commentId: M:Pie.GraphicsDevice.SetIndexBuffer(Pie.GraphicsBuffer,Pie.IndexType)
  id: SetIndexBuffer(Pie.GraphicsBuffer,Pie.IndexType)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: SetIndexBuffer(GraphicsBuffer, IndexType)
  nameWithType: GraphicsDevice.SetIndexBuffer(GraphicsBuffer, IndexType)
  fullName: Pie.GraphicsDevice.SetIndexBuffer(Pie.GraphicsBuffer, Pie.IndexType)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: SetIndexBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 353
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nSet the index buffer that will be used on next draw.\n"
  example: []
  syntax:
    content: public abstract void SetIndexBuffer(GraphicsBuffer buffer, IndexType type)
    parameters:
    - id: buffer
      type: Pie.GraphicsBuffer
      description: The buffer to use.
    - id: type
      type: Pie.IndexType
      description: The type of indices.
    content.vb: Public MustOverride Sub SetIndexBuffer(buffer As GraphicsBuffer, type As IndexType)
  overload: Pie.GraphicsDevice.SetIndexBuffer*
- uid: Pie.GraphicsDevice.SetUniformBuffer(System.UInt32,Pie.GraphicsBuffer)
  commentId: M:Pie.GraphicsDevice.SetUniformBuffer(System.UInt32,Pie.GraphicsBuffer)
  id: SetUniformBuffer(System.UInt32,Pie.GraphicsBuffer)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: SetUniformBuffer(uint, GraphicsBuffer)
  nameWithType: GraphicsDevice.SetUniformBuffer(uint, GraphicsBuffer)
  fullName: Pie.GraphicsDevice.SetUniformBuffer(uint, Pie.GraphicsBuffer)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: SetUniformBuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 360
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nSet the uniform buffer that will be used on next draw.\n"
  example: []
  syntax:
    content: public abstract void SetUniformBuffer(uint bindingSlot, GraphicsBuffer buffer)
    parameters:
    - id: bindingSlot
      type: System.UInt32
      description: ''
    - id: buffer
      type: Pie.GraphicsBuffer
      description: The buffer to use.
    content.vb: Public MustOverride Sub SetUniformBuffer(bindingSlot As UInteger, buffer As GraphicsBuffer)
  overload: Pie.GraphicsDevice.SetUniformBuffer*
  nameWithType.vb: GraphicsDevice.SetUniformBuffer(UInteger, GraphicsBuffer)
  fullName.vb: Pie.GraphicsDevice.SetUniformBuffer(UInteger, Pie.GraphicsBuffer)
  name.vb: SetUniformBuffer(UInteger, GraphicsBuffer)
- uid: Pie.GraphicsDevice.SetFramebuffer(Pie.Framebuffer)
  commentId: M:Pie.GraphicsDevice.SetFramebuffer(Pie.Framebuffer)
  id: SetFramebuffer(Pie.Framebuffer)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: SetFramebuffer(Framebuffer)
  nameWithType: GraphicsDevice.SetFramebuffer(Framebuffer)
  fullName: Pie.GraphicsDevice.SetFramebuffer(Pie.Framebuffer)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: SetFramebuffer
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 366
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nSet the framebuffer that will be used on next draw. Set as null to use the default back buffer.\n"
  example: []
  syntax:
    content: public abstract void SetFramebuffer(Framebuffer framebuffer)
    parameters:
    - id: framebuffer
      type: Pie.Framebuffer
      description: The framebuffer to use.
    content.vb: Public MustOverride Sub SetFramebuffer(framebuffer As Framebuffer)
  overload: Pie.GraphicsDevice.SetFramebuffer*
- uid: Pie.GraphicsDevice.Draw(System.UInt32)
  commentId: M:Pie.GraphicsDevice.Draw(System.UInt32)
  id: Draw(System.UInt32)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Draw(uint)
  nameWithType: GraphicsDevice.Draw(uint)
  fullName: Pie.GraphicsDevice.Draw(uint)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Draw
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 372
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nDraw to the screen with the given number of vertices.\n"
  example: []
  syntax:
    content: public abstract void Draw(uint vertexCount)
    parameters:
    - id: vertexCount
      type: System.UInt32
      description: The number of vertices.
    content.vb: Public MustOverride Sub Draw(vertexCount As UInteger)
  overload: Pie.GraphicsDevice.Draw*
  nameWithType.vb: GraphicsDevice.Draw(UInteger)
  fullName.vb: Pie.GraphicsDevice.Draw(UInteger)
  name.vb: Draw(UInteger)
- uid: Pie.GraphicsDevice.Draw(System.UInt32,System.Int32)
  commentId: M:Pie.GraphicsDevice.Draw(System.UInt32,System.Int32)
  id: Draw(System.UInt32,System.Int32)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Draw(uint, int)
  nameWithType: GraphicsDevice.Draw(uint, int)
  fullName: Pie.GraphicsDevice.Draw(uint, int)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Draw
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 379
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nDraw to the screen with the given number of vertices, at the given start vertex.\n"
  example: []
  syntax:
    content: public abstract void Draw(uint vertexCount, int startVertex)
    parameters:
    - id: vertexCount
      type: System.UInt32
      description: The number of vertices.
    - id: startVertex
      type: System.Int32
      description: The starting vertex of the vertices to draw.
    content.vb: Public MustOverride Sub Draw(vertexCount As UInteger, startVertex As Integer)
  overload: Pie.GraphicsDevice.Draw*
  nameWithType.vb: GraphicsDevice.Draw(UInteger, Integer)
  fullName.vb: Pie.GraphicsDevice.Draw(UInteger, Integer)
  name.vb: Draw(UInteger, Integer)
- uid: Pie.GraphicsDevice.DrawIndexed(System.UInt32)
  commentId: M:Pie.GraphicsDevice.DrawIndexed(System.UInt32)
  id: DrawIndexed(System.UInt32)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: DrawIndexed(uint)
  nameWithType: GraphicsDevice.DrawIndexed(uint)
  fullName: Pie.GraphicsDevice.DrawIndexed(uint)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: DrawIndexed
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 385
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nDraw to the screen with the given indices count.\n"
  example: []
  syntax:
    content: public abstract void DrawIndexed(uint indexCount)
    parameters:
    - id: indexCount
      type: System.UInt32
      description: The number of indices.
    content.vb: Public MustOverride Sub DrawIndexed(indexCount As UInteger)
  overload: Pie.GraphicsDevice.DrawIndexed*
  nameWithType.vb: GraphicsDevice.DrawIndexed(UInteger)
  fullName.vb: Pie.GraphicsDevice.DrawIndexed(UInteger)
  name.vb: DrawIndexed(UInteger)
- uid: Pie.GraphicsDevice.DrawIndexed(System.UInt32,System.Int32)
  commentId: M:Pie.GraphicsDevice.DrawIndexed(System.UInt32,System.Int32)
  id: DrawIndexed(System.UInt32,System.Int32)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: DrawIndexed(uint, int)
  nameWithType: GraphicsDevice.DrawIndexed(uint, int)
  fullName: Pie.GraphicsDevice.DrawIndexed(uint, int)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: DrawIndexed
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 392
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nDraw to the screen with the given indices count, at the given start index.\n"
  example: []
  syntax:
    content: public abstract void DrawIndexed(uint indexCount, int startIndex)
    parameters:
    - id: indexCount
      type: System.UInt32
      description: The number of indices.
    - id: startIndex
      type: System.Int32
      description: The starting index of the indices to draw.
    content.vb: Public MustOverride Sub DrawIndexed(indexCount As UInteger, startIndex As Integer)
  overload: Pie.GraphicsDevice.DrawIndexed*
  nameWithType.vb: GraphicsDevice.DrawIndexed(UInteger, Integer)
  fullName.vb: Pie.GraphicsDevice.DrawIndexed(UInteger, Integer)
  name.vb: DrawIndexed(UInteger, Integer)
- uid: Pie.GraphicsDevice.DrawIndexed(System.UInt32,System.Int32,System.Int32)
  commentId: M:Pie.GraphicsDevice.DrawIndexed(System.UInt32,System.Int32,System.Int32)
  id: DrawIndexed(System.UInt32,System.Int32,System.Int32)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: DrawIndexed(uint, int, int)
  nameWithType: GraphicsDevice.DrawIndexed(uint, int, int)
  fullName: Pie.GraphicsDevice.DrawIndexed(uint, int, int)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: DrawIndexed
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 400
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nDraw to the screen with the given indices count, at the given start index, at the given base vertex.\n"
  example: []
  syntax:
    content: public abstract void DrawIndexed(uint indexCount, int startIndex, int baseVertex)
    parameters:
    - id: indexCount
      type: System.UInt32
      description: The number of indices.
    - id: startIndex
      type: System.Int32
      description: The starting index of the indices to draw.
    - id: baseVertex
      type: System.Int32
      description: The base vertex of the indices to draw.
    content.vb: Public MustOverride Sub DrawIndexed(indexCount As UInteger, startIndex As Integer, baseVertex As Integer)
  overload: Pie.GraphicsDevice.DrawIndexed*
  nameWithType.vb: GraphicsDevice.DrawIndexed(UInteger, Integer, Integer)
  fullName.vb: Pie.GraphicsDevice.DrawIndexed(UInteger, Integer, Integer)
  name.vb: DrawIndexed(UInteger, Integer, Integer)
- uid: Pie.GraphicsDevice.DrawIndexedInstanced(System.UInt32,System.UInt32)
  commentId: M:Pie.GraphicsDevice.DrawIndexedInstanced(System.UInt32,System.UInt32)
  id: DrawIndexedInstanced(System.UInt32,System.UInt32)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: DrawIndexedInstanced(uint, uint)
  nameWithType: GraphicsDevice.DrawIndexedInstanced(uint, uint)
  fullName: Pie.GraphicsDevice.DrawIndexedInstanced(uint, uint)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: DrawIndexedInstanced
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 407
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nDraw with instancing, with the given indices count and number of instances.\n"
  example: []
  syntax:
    content: public abstract void DrawIndexedInstanced(uint indexCount, uint instanceCount)
    parameters:
    - id: indexCount
      type: System.UInt32
      description: The number of indices.
    - id: instanceCount
      type: System.UInt32
      description: The number of instances.
    content.vb: Public MustOverride Sub DrawIndexedInstanced(indexCount As UInteger, instanceCount As UInteger)
  overload: Pie.GraphicsDevice.DrawIndexedInstanced*
  nameWithType.vb: GraphicsDevice.DrawIndexedInstanced(UInteger, UInteger)
  fullName.vb: Pie.GraphicsDevice.DrawIndexedInstanced(UInteger, UInteger)
  name.vb: DrawIndexedInstanced(UInteger, UInteger)
- uid: Pie.GraphicsDevice.Present(System.Int32)
  commentId: M:Pie.GraphicsDevice.Present(System.Int32)
  id: Present(System.Int32)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Present(int)
  nameWithType: GraphicsDevice.Present(int)
  fullName: Pie.GraphicsDevice.Present(int)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Present
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 413
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nPresent to the screen.\n"
  example: []
  syntax:
    content: public abstract void Present(int swapInterval)
    parameters:
    - id: swapInterval
      type: System.Int32
    content.vb: Public MustOverride Sub Present(swapInterval As Integer)
  overload: Pie.GraphicsDevice.Present*
  nameWithType.vb: GraphicsDevice.Present(Integer)
  fullName.vb: Pie.GraphicsDevice.Present(Integer)
  name.vb: Present(Integer)
- uid: Pie.GraphicsDevice.ResizeSwapchain(System.Drawing.Size)
  commentId: M:Pie.GraphicsDevice.ResizeSwapchain(System.Drawing.Size)
  id: ResizeSwapchain(System.Drawing.Size)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: ResizeSwapchain(Size)
  nameWithType: GraphicsDevice.ResizeSwapchain(Size)
  fullName: Pie.GraphicsDevice.ResizeSwapchain(System.Drawing.Size)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: ResizeSwapchain
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 419
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nResize the swapchain.\n"
  example: []
  syntax:
    content: public abstract void ResizeSwapchain(Size newSize)
    parameters:
    - id: newSize
      type: System.Drawing.Size
      description: The new size of the swapchain.
    content.vb: Public MustOverride Sub ResizeSwapchain(newSize As Size)
  overload: Pie.GraphicsDevice.ResizeSwapchain*
- uid: Pie.GraphicsDevice.GenerateMipmaps(Pie.Texture)
  commentId: M:Pie.GraphicsDevice.GenerateMipmaps(Pie.Texture)
  id: GenerateMipmaps(Pie.Texture)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: GenerateMipmaps(Texture)
  nameWithType: GraphicsDevice.GenerateMipmaps(Texture)
  fullName: Pie.GraphicsDevice.GenerateMipmaps(Pie.Texture)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: GenerateMipmaps
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 425
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nGenerate mipmaps for the given texture.\n"
  example: []
  syntax:
    content: public abstract void GenerateMipmaps(Texture texture)
    parameters:
    - id: texture
      type: Pie.Texture
      description: ''
    content.vb: Public MustOverride Sub GenerateMipmaps(texture As Texture)
  overload: Pie.GraphicsDevice.GenerateMipmaps*
- uid: Pie.GraphicsDevice.Dispatch(System.UInt32,System.UInt32,System.UInt32)
  commentId: M:Pie.GraphicsDevice.Dispatch(System.UInt32,System.UInt32,System.UInt32)
  id: Dispatch(System.UInt32,System.UInt32,System.UInt32)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Dispatch(uint, uint, uint)
  nameWithType: GraphicsDevice.Dispatch(uint, uint, uint)
  fullName: Pie.GraphicsDevice.Dispatch(uint, uint, uint)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Dispatch
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 433
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nDispatch the current compute shader.\n"
  example: []
  syntax:
    content: public abstract void Dispatch(uint groupCountX, uint groupCountY, uint groupCountZ)
    parameters:
    - id: groupCountX
      type: System.UInt32
      description: The number of thread groups in X.
    - id: groupCountY
      type: System.UInt32
      description: The number of thread groups in Y.
    - id: groupCountZ
      type: System.UInt32
      description: The number of thread groups in Z.
    content.vb: Public MustOverride Sub Dispatch(groupCountX As UInteger, groupCountY As UInteger, groupCountZ As UInteger)
  overload: Pie.GraphicsDevice.Dispatch*
  nameWithType.vb: GraphicsDevice.Dispatch(UInteger, UInteger, UInteger)
  fullName.vb: Pie.GraphicsDevice.Dispatch(UInteger, UInteger, UInteger)
  name.vb: Dispatch(UInteger, UInteger, UInteger)
- uid: Pie.GraphicsDevice.Flush
  commentId: M:Pie.GraphicsDevice.Flush
  id: Flush
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Flush()
  nameWithType: GraphicsDevice.Flush()
  fullName: Pie.GraphicsDevice.Flush()
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Flush
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 438
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nForce the device to execute all queued commands in the command buffer.\n"
  example: []
  syntax:
    content: public abstract void Flush()
    content.vb: Public MustOverride Sub Flush()
  overload: Pie.GraphicsDevice.Flush*
- uid: Pie.GraphicsDevice.Dispose
  commentId: M:Pie.GraphicsDevice.Dispose
  id: Dispose
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: GraphicsDevice.Dispose()
  fullName: Pie.GraphicsDevice.Dispose()
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Dispose
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 443
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nDispose of this graphics device.\n"
  example: []
  syntax:
    content: public abstract void Dispose()
    content.vb: Public MustOverride Sub Dispose()
  overload: Pie.GraphicsDevice.Dispose*
  implements:
  - System.IDisposable.Dispose
- uid: Pie.GraphicsDevice.CreateOpenGL(IGLContext,System.Drawing.Size,Pie.GraphicsDeviceOptions)
  commentId: M:Pie.GraphicsDevice.CreateOpenGL(IGLContext,System.Drawing.Size,Pie.GraphicsDeviceOptions)
  id: CreateOpenGL(IGLContext,System.Drawing.Size,Pie.GraphicsDeviceOptions)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateOpenGL(IGLContext, Size, GraphicsDeviceOptions)
  nameWithType: GraphicsDevice.CreateOpenGL(IGLContext, Size, GraphicsDeviceOptions)
  fullName: Pie.GraphicsDevice.CreateOpenGL(IGLContext, System.Drawing.Size, Pie.GraphicsDeviceOptions)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateOpenGL
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 452
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate an OpenGL 3.3 graphics device.\n"
  example: []
  syntax:
    content: public static GraphicsDevice CreateOpenGL(IGLContext context, Size winSize, GraphicsDeviceOptions options = default)
    parameters:
    - id: context
      type: IGLContext
      description: The GL context.
    - id: winSize
      type: System.Drawing.Size
      description: The size of the window on startup.
    - id: options
      type: Pie.GraphicsDeviceOptions
      description: The options for this graphics device, if any.
    return:
      type: Pie.GraphicsDevice
      description: The created graphics device.
    content.vb: Public Shared Function CreateOpenGL(context As IGLContext, winSize As Size, options As GraphicsDeviceOptions = Nothing) As GraphicsDevice
  overload: Pie.GraphicsDevice.CreateOpenGL*
- uid: Pie.GraphicsDevice.CreateD3D11(System.IntPtr,System.Drawing.Size,Pie.GraphicsDeviceOptions)
  commentId: M:Pie.GraphicsDevice.CreateD3D11(System.IntPtr,System.Drawing.Size,Pie.GraphicsDeviceOptions)
  id: CreateD3D11(System.IntPtr,System.Drawing.Size,Pie.GraphicsDeviceOptions)
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateD3D11(IntPtr, Size, GraphicsDeviceOptions)
  nameWithType: GraphicsDevice.CreateD3D11(IntPtr, Size, GraphicsDeviceOptions)
  fullName: Pie.GraphicsDevice.CreateD3D11(System.IntPtr, System.Drawing.Size, Pie.GraphicsDeviceOptions)
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateD3D11
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 464
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCreate a Direct3D 11 graphics device.\n"
  example: []
  syntax:
    content: public static GraphicsDevice CreateD3D11(IntPtr hwnd, Size winSize, GraphicsDeviceOptions options = default)
    parameters:
    - id: hwnd
      type: System.IntPtr
      description: The HWND pointer.
    - id: winSize
      type: System.Drawing.Size
      description: The size of the window on startup.
    - id: options
      type: Pie.GraphicsDeviceOptions
      description: The options for this graphics device, if any.
    return:
      type: Pie.GraphicsDevice
      description: The created graphics device.
    content.vb: Public Shared Function CreateD3D11(hwnd As IntPtr, winSize As Size, options As GraphicsDeviceOptions = Nothing) As GraphicsDevice
  overload: Pie.GraphicsDevice.CreateD3D11*
- uid: Pie.GraphicsDevice.CreateVulkan
  commentId: M:Pie.GraphicsDevice.CreateVulkan
  id: CreateVulkan
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: CreateVulkan()
  nameWithType: GraphicsDevice.CreateVulkan()
  fullName: Pie.GraphicsDevice.CreateVulkan()
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CreateVulkan
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 469
  assemblies:
  - Pie
  namespace: Pie
  syntax:
    content: public static GraphicsDevice CreateVulkan()
    return:
      type: Pie.GraphicsDevice
    content.vb: Public Shared Function CreateVulkan() As GraphicsDevice
  overload: Pie.GraphicsDevice.CreateVulkan*
- uid: Pie.GraphicsDevice.GetBestApiForPlatform
  commentId: M:Pie.GraphicsDevice.GetBestApiForPlatform
  id: GetBestApiForPlatform
  parent: Pie.GraphicsDevice
  langs:
  - csharp
  - vb
  name: GetBestApiForPlatform()
  nameWithType: GraphicsDevice.GetBestApiForPlatform()
  fullName: Pie.GraphicsDevice.GetBestApiForPlatform()
  type: Method
  source:
    remote:
      path: Pie/GraphicsDevice.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: GetBestApiForPlatform
    path: src/Pie/Pie/GraphicsDevice.cs
    startLine: 478
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nDetermine the best graphics API to use for the current platform.\n"
  example: []
  syntax:
    content: public static GraphicsApi GetBestApiForPlatform()
    return:
      type: Pie.GraphicsApi
      description: ''
    content.vb: Public Shared Function GetBestApiForPlatform() As GraphicsApi
  overload: Pie.GraphicsDevice.GetBestApiForPlatform*
references:
- uid: Pie
  commentId: N:Pie
  name: Pie
  nameWithType: Pie
  fullName: Pie
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Pie.GraphicsApi
  commentId: T:Pie.GraphicsApi
  parent: Pie
  name: GraphicsApi
  nameWithType: GraphicsApi
  fullName: Pie.GraphicsApi
- uid: Pie.GraphicsDevice.Api*
  commentId: Overload:Pie.GraphicsDevice.Api
  name: Api
  nameWithType: GraphicsDevice.Api
  fullName: Pie.GraphicsDevice.Api
- uid: Pie.GraphicsDevice.Swapchain
  commentId: P:Pie.GraphicsDevice.Swapchain
  isExternal: true
- uid: Pie.GraphicsDevice.Swapchain*
  commentId: Overload:Pie.GraphicsDevice.Swapchain
  name: Swapchain
  nameWithType: GraphicsDevice.Swapchain
  fullName: Pie.GraphicsDevice.Swapchain
- uid: Pie.Swapchain
  commentId: T:Pie.Swapchain
  parent: Pie
  name: Swapchain
  nameWithType: Swapchain
  fullName: Pie.Swapchain
- uid: Pie.GraphicsAdapter
  commentId: T:Pie.GraphicsAdapter
  parent: Pie
  name: GraphicsAdapter
  nameWithType: GraphicsAdapter
  fullName: Pie.GraphicsAdapter
- uid: Pie.GraphicsDevice.Adapter*
  commentId: Overload:Pie.GraphicsDevice.Adapter
  name: Adapter
  nameWithType: GraphicsDevice.Adapter
  fullName: Pie.GraphicsDevice.Adapter
- uid: Pie.GraphicsDevice.Viewport*
  commentId: Overload:Pie.GraphicsDevice.Viewport
  name: Viewport
  nameWithType: GraphicsDevice.Viewport
  fullName: Pie.GraphicsDevice.Viewport
- uid: System.Drawing.Rectangle
  commentId: T:System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
- uid: Pie.GraphicsDevice.Scissor*
  commentId: Overload:Pie.GraphicsDevice.Scissor
  name: Scissor
  nameWithType: GraphicsDevice.Scissor
  fullName: Pie.GraphicsDevice.Scissor
- uid: Pie.GraphicsDevice.Clear*
  commentId: Overload:Pie.GraphicsDevice.Clear
  name: Clear
  nameWithType: GraphicsDevice.Clear
  fullName: Pie.GraphicsDevice.Clear
- uid: System.Drawing.Color
  commentId: T:System.Drawing.Color
  parent: System.Drawing
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: Pie.ClearFlags
  commentId: T:Pie.ClearFlags
  parent: Pie
  name: ClearFlags
  nameWithType: ClearFlags
  fullName: Pie.ClearFlags
- uid: System.Numerics.Vector4
  commentId: T:System.Numerics.Vector4
  parent: System.Numerics
  isExternal: true
  name: Vector4
  nameWithType: Vector4
  fullName: System.Numerics.Vector4
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
- uid: Pie.GraphicsDevice.CreateBuffer*
  commentId: Overload:Pie.GraphicsDevice.CreateBuffer
  name: CreateBuffer
  nameWithType: GraphicsDevice.CreateBuffer
  fullName: Pie.GraphicsDevice.CreateBuffer
- uid: Pie.BufferType
  commentId: T:Pie.BufferType
  parent: Pie
  name: BufferType
  nameWithType: BufferType
  fullName: Pie.BufferType
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Pie.GraphicsBuffer
  commentId: T:Pie.GraphicsBuffer
  parent: Pie
  name: GraphicsBuffer
  nameWithType: GraphicsBuffer
  fullName: Pie.GraphicsBuffer
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Void*
  isExternal: true
  name: void*
  nameWithType: void*
  fullName: void*
  nameWithType.vb: Void*
  fullName.vb: Void*
  name.vb: Void*
  spec.csharp:
  - uid: System.Void
    name: void
    isExternal: true
  - name: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    isExternal: true
  - name: '*'
- uid: Pie.GraphicsDevice.CreateTexture*
  commentId: Overload:Pie.GraphicsDevice.CreateTexture
  name: CreateTexture
  nameWithType: GraphicsDevice.CreateTexture
  fullName: Pie.GraphicsDevice.CreateTexture
- uid: Pie.TextureDescription
  commentId: T:Pie.TextureDescription
  parent: Pie
  name: TextureDescription
  nameWithType: TextureDescription
  fullName: Pie.TextureDescription
- uid: Pie.Texture
  commentId: T:Pie.Texture
  parent: Pie
  name: Texture
  nameWithType: Texture
  fullName: Pie.Texture
- uid: Pie.Format
  commentId: T:Pie.Format
  parent: Pie
  name: Format
  nameWithType: Format
  fullName: Pie.Format
- uid: '{T}[][]'
  isExternal: true
  name: T[][]
  nameWithType: T[][]
  fullName: T[][]
  nameWithType.vb: T()()
  fullName.vb: T()()
  name.vb: T()()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
  - name: (
  - name: )
- uid: Pie.GraphicsDevice.CreateShader*
  commentId: Overload:Pie.GraphicsDevice.CreateShader
  name: CreateShader
  nameWithType: GraphicsDevice.CreateShader
  fullName: Pie.GraphicsDevice.CreateShader
- uid: Pie.ShaderAttachment[]
  isExternal: true
  name: ShaderAttachment[]
  nameWithType: ShaderAttachment[]
  fullName: Pie.ShaderAttachment[]
  nameWithType.vb: ShaderAttachment()
  fullName.vb: Pie.ShaderAttachment()
  name.vb: ShaderAttachment()
  spec.csharp:
  - uid: Pie.ShaderAttachment
    name: ShaderAttachment
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Pie.ShaderAttachment
    name: ShaderAttachment
  - name: (
  - name: )
- uid: Pie.Shader
  commentId: T:Pie.Shader
  parent: Pie
  name: Shader
  nameWithType: Shader
  fullName: Pie.Shader
- uid: Pie.GraphicsDevice.CreateInputLayout*
  commentId: Overload:Pie.GraphicsDevice.CreateInputLayout
  name: CreateInputLayout
  nameWithType: GraphicsDevice.CreateInputLayout
  fullName: Pie.GraphicsDevice.CreateInputLayout
- uid: Pie.InputLayoutDescription[]
  isExternal: true
  name: InputLayoutDescription[]
  nameWithType: InputLayoutDescription[]
  fullName: Pie.InputLayoutDescription[]
  nameWithType.vb: InputLayoutDescription()
  fullName.vb: Pie.InputLayoutDescription()
  name.vb: InputLayoutDescription()
  spec.csharp:
  - uid: Pie.InputLayoutDescription
    name: InputLayoutDescription
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Pie.InputLayoutDescription
    name: InputLayoutDescription
  - name: (
  - name: )
- uid: Pie.InputLayout
  commentId: T:Pie.InputLayout
  parent: Pie
  name: InputLayout
  nameWithType: InputLayout
  fullName: Pie.InputLayout
- uid: Pie.GraphicsDevice.CreateRasterizerState*
  commentId: Overload:Pie.GraphicsDevice.CreateRasterizerState
  name: CreateRasterizerState
  nameWithType: GraphicsDevice.CreateRasterizerState
  fullName: Pie.GraphicsDevice.CreateRasterizerState
- uid: Pie.RasterizerStateDescription
  commentId: T:Pie.RasterizerStateDescription
  parent: Pie
  name: RasterizerStateDescription
  nameWithType: RasterizerStateDescription
  fullName: Pie.RasterizerStateDescription
- uid: Pie.RasterizerState
  commentId: T:Pie.RasterizerState
  parent: Pie
  name: RasterizerState
  nameWithType: RasterizerState
  fullName: Pie.RasterizerState
- uid: Pie.GraphicsDevice.CreateBlendState*
  commentId: Overload:Pie.GraphicsDevice.CreateBlendState
  name: CreateBlendState
  nameWithType: GraphicsDevice.CreateBlendState
  fullName: Pie.GraphicsDevice.CreateBlendState
- uid: Pie.BlendStateDescription
  commentId: T:Pie.BlendStateDescription
  parent: Pie
  name: BlendStateDescription
  nameWithType: BlendStateDescription
  fullName: Pie.BlendStateDescription
- uid: Pie.BlendState
  commentId: T:Pie.BlendState
  parent: Pie
  name: BlendState
  nameWithType: BlendState
  fullName: Pie.BlendState
- uid: Pie.GraphicsDevice.CreateDepthState*
  commentId: Overload:Pie.GraphicsDevice.CreateDepthState
  name: CreateDepthState
  nameWithType: GraphicsDevice.CreateDepthState
  fullName: Pie.GraphicsDevice.CreateDepthState
- uid: Pie.DepthStateDescription
  commentId: T:Pie.DepthStateDescription
  parent: Pie
  name: DepthStateDescription
  nameWithType: DepthStateDescription
  fullName: Pie.DepthStateDescription
- uid: Pie.DepthState
  commentId: T:Pie.DepthState
  parent: Pie
  name: DepthState
  nameWithType: DepthState
  fullName: Pie.DepthState
- uid: Pie.GraphicsDevice.CreateSamplerState*
  commentId: Overload:Pie.GraphicsDevice.CreateSamplerState
  name: CreateSamplerState
  nameWithType: GraphicsDevice.CreateSamplerState
  fullName: Pie.GraphicsDevice.CreateSamplerState
- uid: Pie.SamplerStateDescription
  commentId: T:Pie.SamplerStateDescription
  parent: Pie
  name: SamplerStateDescription
  nameWithType: SamplerStateDescription
  fullName: Pie.SamplerStateDescription
- uid: Pie.SamplerState
  commentId: T:Pie.SamplerState
  parent: Pie
  name: SamplerState
  nameWithType: SamplerState
  fullName: Pie.SamplerState
- uid: Pie.GraphicsDevice.CreateFramebuffer*
  commentId: Overload:Pie.GraphicsDevice.CreateFramebuffer
  name: CreateFramebuffer
  nameWithType: GraphicsDevice.CreateFramebuffer
  fullName: Pie.GraphicsDevice.CreateFramebuffer
- uid: Pie.FramebufferAttachment[]
  isExternal: true
  name: FramebufferAttachment[]
  nameWithType: FramebufferAttachment[]
  fullName: Pie.FramebufferAttachment[]
  nameWithType.vb: FramebufferAttachment()
  fullName.vb: Pie.FramebufferAttachment()
  name.vb: FramebufferAttachment()
  spec.csharp:
  - uid: Pie.FramebufferAttachment
    name: FramebufferAttachment
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Pie.FramebufferAttachment
    name: FramebufferAttachment
  - name: (
  - name: )
- uid: Pie.Framebuffer
  commentId: T:Pie.Framebuffer
  parent: Pie
  name: Framebuffer
  nameWithType: Framebuffer
  fullName: Pie.Framebuffer
- uid: Pie.GraphicsDevice.UpdateBuffer*
  commentId: Overload:Pie.GraphicsDevice.UpdateBuffer
  name: UpdateBuffer
  nameWithType: GraphicsDevice.UpdateBuffer
  fullName: Pie.GraphicsDevice.UpdateBuffer
- uid: Pie.GraphicsDevice.UpdateTexture*
  commentId: Overload:Pie.GraphicsDevice.UpdateTexture
  name: UpdateTexture
  nameWithType: GraphicsDevice.UpdateTexture
  fullName: Pie.GraphicsDevice.UpdateTexture
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Pie.GraphicsDevice.MapBuffer*
  commentId: Overload:Pie.GraphicsDevice.MapBuffer
  name: MapBuffer
  nameWithType: GraphicsDevice.MapBuffer
  fullName: Pie.GraphicsDevice.MapBuffer
- uid: Pie.MapMode
  commentId: T:Pie.MapMode
  parent: Pie
  name: MapMode
  nameWithType: MapMode
  fullName: Pie.MapMode
- uid: Pie.GraphicsDevice.UnmapBuffer*
  commentId: Overload:Pie.GraphicsDevice.UnmapBuffer
  name: UnmapBuffer
  nameWithType: GraphicsDevice.UnmapBuffer
  fullName: Pie.GraphicsDevice.UnmapBuffer
- uid: Pie.GraphicsDevice.SetShader*
  commentId: Overload:Pie.GraphicsDevice.SetShader
  name: SetShader
  nameWithType: GraphicsDevice.SetShader
  fullName: Pie.GraphicsDevice.SetShader
- uid: Pie.GraphicsDevice.SetTexture*
  commentId: Overload:Pie.GraphicsDevice.SetTexture
  name: SetTexture
  nameWithType: GraphicsDevice.SetTexture
  fullName: Pie.GraphicsDevice.SetTexture
- uid: Pie.GraphicsDevice.SetRasterizerState*
  commentId: Overload:Pie.GraphicsDevice.SetRasterizerState
  name: SetRasterizerState
  nameWithType: GraphicsDevice.SetRasterizerState
  fullName: Pie.GraphicsDevice.SetRasterizerState
- uid: Pie.GraphicsDevice.SetBlendState*
  commentId: Overload:Pie.GraphicsDevice.SetBlendState
  name: SetBlendState
  nameWithType: GraphicsDevice.SetBlendState
  fullName: Pie.GraphicsDevice.SetBlendState
- uid: Pie.GraphicsDevice.SetDepthState*
  commentId: Overload:Pie.GraphicsDevice.SetDepthState
  name: SetDepthState
  nameWithType: GraphicsDevice.SetDepthState
  fullName: Pie.GraphicsDevice.SetDepthState
- uid: Pie.GraphicsDevice.SetPrimitiveType*
  commentId: Overload:Pie.GraphicsDevice.SetPrimitiveType
  name: SetPrimitiveType
  nameWithType: GraphicsDevice.SetPrimitiveType
  fullName: Pie.GraphicsDevice.SetPrimitiveType
- uid: Pie.PrimitiveType
  commentId: T:Pie.PrimitiveType
  parent: Pie
  name: PrimitiveType
  nameWithType: PrimitiveType
  fullName: Pie.PrimitiveType
- uid: Pie.GraphicsDevice.SetVertexBuffer*
  commentId: Overload:Pie.GraphicsDevice.SetVertexBuffer
  name: SetVertexBuffer
  nameWithType: GraphicsDevice.SetVertexBuffer
  fullName: Pie.GraphicsDevice.SetVertexBuffer
- uid: Pie.GraphicsDevice.SetIndexBuffer*
  commentId: Overload:Pie.GraphicsDevice.SetIndexBuffer
  name: SetIndexBuffer
  nameWithType: GraphicsDevice.SetIndexBuffer
  fullName: Pie.GraphicsDevice.SetIndexBuffer
- uid: Pie.IndexType
  commentId: T:Pie.IndexType
  parent: Pie
  name: IndexType
  nameWithType: IndexType
  fullName: Pie.IndexType
- uid: Pie.GraphicsDevice.SetUniformBuffer*
  commentId: Overload:Pie.GraphicsDevice.SetUniformBuffer
  name: SetUniformBuffer
  nameWithType: GraphicsDevice.SetUniformBuffer
  fullName: Pie.GraphicsDevice.SetUniformBuffer
- uid: Pie.GraphicsDevice.SetFramebuffer*
  commentId: Overload:Pie.GraphicsDevice.SetFramebuffer
  name: SetFramebuffer
  nameWithType: GraphicsDevice.SetFramebuffer
  fullName: Pie.GraphicsDevice.SetFramebuffer
- uid: Pie.GraphicsDevice.Draw*
  commentId: Overload:Pie.GraphicsDevice.Draw
  name: Draw
  nameWithType: GraphicsDevice.Draw
  fullName: Pie.GraphicsDevice.Draw
- uid: Pie.GraphicsDevice.DrawIndexed*
  commentId: Overload:Pie.GraphicsDevice.DrawIndexed
  name: DrawIndexed
  nameWithType: GraphicsDevice.DrawIndexed
  fullName: Pie.GraphicsDevice.DrawIndexed
- uid: Pie.GraphicsDevice.DrawIndexedInstanced*
  commentId: Overload:Pie.GraphicsDevice.DrawIndexedInstanced
  name: DrawIndexedInstanced
  nameWithType: GraphicsDevice.DrawIndexedInstanced
  fullName: Pie.GraphicsDevice.DrawIndexedInstanced
- uid: Pie.GraphicsDevice.Present*
  commentId: Overload:Pie.GraphicsDevice.Present
  name: Present
  nameWithType: GraphicsDevice.Present
  fullName: Pie.GraphicsDevice.Present
- uid: Pie.GraphicsDevice.ResizeSwapchain*
  commentId: Overload:Pie.GraphicsDevice.ResizeSwapchain
  name: ResizeSwapchain
  nameWithType: GraphicsDevice.ResizeSwapchain
  fullName: Pie.GraphicsDevice.ResizeSwapchain
- uid: System.Drawing.Size
  commentId: T:System.Drawing.Size
  parent: System.Drawing
  isExternal: true
  name: Size
  nameWithType: Size
  fullName: System.Drawing.Size
- uid: Pie.GraphicsDevice.GenerateMipmaps*
  commentId: Overload:Pie.GraphicsDevice.GenerateMipmaps
  name: GenerateMipmaps
  nameWithType: GraphicsDevice.GenerateMipmaps
  fullName: Pie.GraphicsDevice.GenerateMipmaps
- uid: Pie.GraphicsDevice.Dispatch*
  commentId: Overload:Pie.GraphicsDevice.Dispatch
  name: Dispatch
  nameWithType: GraphicsDevice.Dispatch
  fullName: Pie.GraphicsDevice.Dispatch
- uid: Pie.GraphicsDevice.Flush*
  commentId: Overload:Pie.GraphicsDevice.Flush
  name: Flush
  nameWithType: GraphicsDevice.Flush
  fullName: Pie.GraphicsDevice.Flush
- uid: Pie.GraphicsDevice.Dispose*
  commentId: Overload:Pie.GraphicsDevice.Dispose
  name: Dispose
  nameWithType: GraphicsDevice.Dispose
  fullName: Pie.GraphicsDevice.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
- uid: Pie.GraphicsDevice.CreateOpenGL*
  commentId: Overload:Pie.GraphicsDevice.CreateOpenGL
  name: CreateOpenGL
  nameWithType: GraphicsDevice.CreateOpenGL
  fullName: Pie.GraphicsDevice.CreateOpenGL
- uid: IGLContext
  commentId: '!:IGLContext'
  isExternal: true
  name: IGLContext
  nameWithType: IGLContext
  fullName: IGLContext
- uid: Pie.GraphicsDeviceOptions
  commentId: T:Pie.GraphicsDeviceOptions
  parent: Pie
  name: GraphicsDeviceOptions
  nameWithType: GraphicsDeviceOptions
  fullName: Pie.GraphicsDeviceOptions
- uid: Pie.GraphicsDevice
  commentId: T:Pie.GraphicsDevice
  parent: Pie
  name: GraphicsDevice
  nameWithType: GraphicsDevice
  fullName: Pie.GraphicsDevice
- uid: Pie.GraphicsDevice.CreateD3D11*
  commentId: Overload:Pie.GraphicsDevice.CreateD3D11
  name: CreateD3D11
  nameWithType: GraphicsDevice.CreateD3D11
  fullName: Pie.GraphicsDevice.CreateD3D11
- uid: Pie.GraphicsDevice.CreateVulkan*
  commentId: Overload:Pie.GraphicsDevice.CreateVulkan
  name: CreateVulkan
  nameWithType: GraphicsDevice.CreateVulkan
  fullName: Pie.GraphicsDevice.CreateVulkan
- uid: Pie.GraphicsDevice.GetBestApiForPlatform*
  commentId: Overload:Pie.GraphicsDevice.GetBestApiForPlatform
  name: GetBestApiForPlatform
  nameWithType: GraphicsDevice.GetBestApiForPlatform
  fullName: Pie.GraphicsDevice.GetBestApiForPlatform
