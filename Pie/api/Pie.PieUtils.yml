### YamlMime:ManagedReference
items:
- uid: Pie.PieUtils
  commentId: T:Pie.PieUtils
  id: PieUtils
  parent: Pie
  children:
  - Pie.PieUtils.Assert(System.Boolean,System.String)
  - Pie.PieUtils.BitsPerPixel(Pie.Format)
  - Pie.PieUtils.Combine``1(``0[][])
  - Pie.PieUtils.CopyToUnmanaged``1(System.IntPtr,System.Int32,``0[])
  - Pie.PieUtils.CopyToUnmanaged``1(System.IntPtr,System.Int32,System.UInt32,``0[])
  - Pie.PieUtils.Normalize(System.Drawing.Color)
  langs:
  - csharp
  - vb
  name: PieUtils
  nameWithType: PieUtils
  fullName: Pie.PieUtils
  type: Class
  source:
    remote:
      path: Pie/PieUtils.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: PieUtils
    path: src/Pie/Pie/PieUtils.cs
    startLine: 10
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nVarious handy utilities you may use when developing with Pie.\n"
  example: []
  syntax:
    content: public static class PieUtils
    content.vb: Public Module PieUtils
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Pie.PieUtils.Normalize(System.Drawing.Color)
  commentId: M:Pie.PieUtils.Normalize(System.Drawing.Color)
  id: Normalize(System.Drawing.Color)
  isExtensionMethod: true
  parent: Pie.PieUtils
  langs:
  - csharp
  - vb
  name: Normalize(Color)
  nameWithType: PieUtils.Normalize(Color)
  fullName: Pie.PieUtils.Normalize(System.Drawing.Color)
  type: Method
  source:
    remote:
      path: Pie/PieUtils.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Normalize
    path: src/Pie/Pie/PieUtils.cs
    startLine: 19
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nNormalize a <xref href=\"System.Drawing.Color\" data-throw-if-not-resolved=\"false\"></xref> for use in a shader.\n"
  example: []
  syntax:
    content: public static Vector4 Normalize(this Color color)
    parameters:
    - id: color
      type: System.Drawing.Color
      description: The color to normalize.
    return:
      type: System.Numerics.Vector4
      description: The normalized color.
    content.vb: Public Shared Function Normalize(color As Color) As Vector4
  overload: Pie.PieUtils.Normalize*
- uid: Pie.PieUtils.Assert(System.Boolean,System.String)
  commentId: M:Pie.PieUtils.Assert(System.Boolean,System.String)
  id: Assert(System.Boolean,System.String)
  parent: Pie.PieUtils
  langs:
  - csharp
  - vb
  name: Assert(bool, string)
  nameWithType: PieUtils.Assert(bool, string)
  fullName: Pie.PieUtils.Assert(bool, string)
  type: Method
  source:
    remote:
      path: Pie/PieUtils.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Assert
    path: src/Pie/Pie/PieUtils.cs
    startLine: 29
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nAssert even in release mode.\n"
  example: []
  syntax:
    content: public static void Assert(bool condition, string message)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to assert.
    - id: message
      type: System.String
      description: The message if the assertion fails.
    content.vb: Public Shared Sub Assert(condition As Boolean, message As String)
  overload: Pie.PieUtils.Assert*
  exceptions:
  - type: Pie.PieException
    commentId: T:Pie.PieException
    description: Thrown if the assertion fails.
  nameWithType.vb: PieUtils.Assert(Boolean, String)
  fullName.vb: Pie.PieUtils.Assert(Boolean, String)
  name.vb: Assert(Boolean, String)
- uid: Pie.PieUtils.Combine``1(``0[][])
  commentId: M:Pie.PieUtils.Combine``1(``0[][])
  id: Combine``1(``0[][])
  parent: Pie.PieUtils
  langs:
  - csharp
  - vb
  name: Combine<T>(params T[][])
  nameWithType: PieUtils.Combine<T>(params T[][])
  fullName: Pie.PieUtils.Combine<T>(params T[][])
  type: Method
  source:
    remote:
      path: Pie/PieUtils.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: Combine
    path: src/Pie/Pie/PieUtils.cs
    startLine: 44
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCombine multiple textures into one array. Pie texture functions only support a single byte array, however certain\ntexture types (array textures, cubemaps) require you to have <em>multiple</em> of these byte arrays. This function\nperforms a fast block copy of the arrays into a single array.\n"
  example: []
  syntax:
    content: 'public static T[] Combine<T>(params T[][] data) where T : unmanaged'
    parameters:
    - id: data
      type: '{T}[][]'
      description: The data arrays to combine.
    typeParameters:
    - id: T
      description: The data type.
    return:
      type: '{T}[]'
      description: The combined data.
    content.vb: Public Shared Function Combine(Of T As Structure)(ParamArray data As T()()) As T()
  overload: Pie.PieUtils.Combine*
  nameWithType.vb: PieUtils.Combine(Of T)(ParamArray T()())
  fullName.vb: Pie.PieUtils.Combine(Of T)(ParamArray T()())
  name.vb: Combine(Of T)(ParamArray T()())
- uid: Pie.PieUtils.CopyToUnmanaged``1(System.IntPtr,System.Int32,System.UInt32,``0[])
  commentId: M:Pie.PieUtils.CopyToUnmanaged``1(System.IntPtr,System.Int32,System.UInt32,``0[])
  id: CopyToUnmanaged``1(System.IntPtr,System.Int32,System.UInt32,``0[])
  parent: Pie.PieUtils
  langs:
  - csharp
  - vb
  name: CopyToUnmanaged<T>(IntPtr, int, uint, T[])
  nameWithType: PieUtils.CopyToUnmanaged<T>(IntPtr, int, uint, T[])
  fullName: Pie.PieUtils.CopyToUnmanaged<T>(System.IntPtr, int, uint, T[])
  type: Method
  source:
    remote:
      path: Pie/PieUtils.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CopyToUnmanaged
    path: src/Pie/Pie/PieUtils.cs
    startLine: 75
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCopy the given data to a section in unmanaged memory (useful for copying data to a mapped buffer in a safe\ncontext.)\n"
  example: []
  syntax:
    content: 'public static void CopyToUnmanaged<T>(IntPtr unmanagedPtr, int offsetInBytes, uint dataLengthInBytes, T[] data) where T : unmanaged'
    parameters:
    - id: unmanagedPtr
      type: System.IntPtr
      description: The pointer to unmanaged memory.
    - id: offsetInBytes
      type: System.Int32
      description: The offset in bytes.
    - id: dataLengthInBytes
      type: System.UInt32
      description: The data length in bytes.
    - id: data
      type: '{T}[]'
      description: The data itself.
    typeParameters:
    - id: T
      description: Any unmanaged type.
    content.vb: Public Shared Sub CopyToUnmanaged(Of T As Structure)(unmanagedPtr As IntPtr, offsetInBytes As Integer, dataLengthInBytes As UInteger, data As T())
  overload: Pie.PieUtils.CopyToUnmanaged*
  nameWithType.vb: PieUtils.CopyToUnmanaged(Of T)(IntPtr, Integer, UInteger, T())
  fullName.vb: Pie.PieUtils.CopyToUnmanaged(Of T)(System.IntPtr, Integer, UInteger, T())
  name.vb: CopyToUnmanaged(Of T)(IntPtr, Integer, UInteger, T())
- uid: Pie.PieUtils.CopyToUnmanaged``1(System.IntPtr,System.Int32,``0[])
  commentId: M:Pie.PieUtils.CopyToUnmanaged``1(System.IntPtr,System.Int32,``0[])
  id: CopyToUnmanaged``1(System.IntPtr,System.Int32,``0[])
  parent: Pie.PieUtils
  langs:
  - csharp
  - vb
  name: CopyToUnmanaged<T>(IntPtr, int, T[])
  nameWithType: PieUtils.CopyToUnmanaged<T>(IntPtr, int, T[])
  fullName: Pie.PieUtils.CopyToUnmanaged<T>(System.IntPtr, int, T[])
  type: Method
  source:
    remote:
      path: Pie/PieUtils.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: CopyToUnmanaged
    path: src/Pie/Pie/PieUtils.cs
    startLine: 91
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nCopy the given data to a section in unmanaged memory (useful for copying data to a mapped buffer in a safe\ncontext.)\n"
  example: []
  syntax:
    content: 'public static void CopyToUnmanaged<T>(IntPtr unmanagedPtr, int offsetInBytes, T[] data) where T : unmanaged'
    parameters:
    - id: unmanagedPtr
      type: System.IntPtr
      description: The pointer to unmanaged memory.
    - id: offsetInBytes
      type: System.Int32
      description: The offset in bytes.
    - id: data
      type: '{T}[]'
      description: The data itself.
    typeParameters:
    - id: T
      description: Any unmanaged type.
    content.vb: Public Shared Sub CopyToUnmanaged(Of T As Structure)(unmanagedPtr As IntPtr, offsetInBytes As Integer, data As T())
  overload: Pie.PieUtils.CopyToUnmanaged*
  nameWithType.vb: PieUtils.CopyToUnmanaged(Of T)(IntPtr, Integer, T())
  fullName.vb: Pie.PieUtils.CopyToUnmanaged(Of T)(System.IntPtr, Integer, T())
  name.vb: CopyToUnmanaged(Of T)(IntPtr, Integer, T())
- uid: Pie.PieUtils.BitsPerPixel(Pie.Format)
  commentId: M:Pie.PieUtils.BitsPerPixel(Pie.Format)
  id: BitsPerPixel(Pie.Format)
  isExtensionMethod: true
  parent: Pie.PieUtils
  langs:
  - csharp
  - vb
  name: BitsPerPixel(Format)
  nameWithType: PieUtils.BitsPerPixel(Format)
  fullName: Pie.PieUtils.BitsPerPixel(Pie.Format)
  type: Method
  source:
    remote:
      path: Pie/PieUtils.cs
      branch: master
      repo: https://github.com/piegfx/Pie
    id: BitsPerPixel
    path: src/Pie/Pie/PieUtils.cs
    startLine: 103
  assemblies:
  - Pie
  namespace: Pie
  summary: "\nGets the bits per pixel of the given format. (For example, R8G8B8A8_UNorm would be 32-bits).\n"
  example: []
  syntax:
    content: public static int BitsPerPixel(this Format format)
    parameters:
    - id: format
      type: Pie.Format
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Function BitsPerPixel(format As Format) As Integer
  overload: Pie.PieUtils.BitsPerPixel*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
references:
- uid: Pie
  commentId: N:Pie
  name: Pie
  nameWithType: Pie
  fullName: Pie
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Drawing.Color
  commentId: T:System.Drawing.Color
  parent: System.Drawing
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: Pie.PieUtils.Normalize*
  commentId: Overload:Pie.PieUtils.Normalize
  name: Normalize
  nameWithType: PieUtils.Normalize
  fullName: Pie.PieUtils.Normalize
- uid: System.Numerics.Vector4
  commentId: T:System.Numerics.Vector4
  parent: System.Numerics
  isExternal: true
  name: Vector4
  nameWithType: Vector4
  fullName: System.Numerics.Vector4
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
- uid: Pie.PieException
  commentId: T:Pie.PieException
  name: PieException
  nameWithType: PieException
  fullName: Pie.PieException
- uid: Pie.PieUtils.Assert*
  commentId: Overload:Pie.PieUtils.Assert
  name: Assert
  nameWithType: PieUtils.Assert
  fullName: Pie.PieUtils.Assert
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Pie.PieUtils.Combine*
  commentId: Overload:Pie.PieUtils.Combine
  name: Combine
  nameWithType: PieUtils.Combine
  fullName: Pie.PieUtils.Combine
- uid: '{T}[][]'
  isExternal: true
  name: T[][]
  nameWithType: T[][]
  fullName: T[][]
  nameWithType.vb: T()()
  fullName.vb: T()()
  name.vb: T()()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
  - name: (
  - name: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: Pie.PieUtils.CopyToUnmanaged*
  commentId: Overload:Pie.PieUtils.CopyToUnmanaged
  name: CopyToUnmanaged
  nameWithType: PieUtils.CopyToUnmanaged
  fullName: Pie.PieUtils.CopyToUnmanaged
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: Pie.PieUtils.BitsPerPixel*
  commentId: Overload:Pie.PieUtils.BitsPerPixel
  name: BitsPerPixel
  nameWithType: PieUtils.BitsPerPixel
  fullName: Pie.PieUtils.BitsPerPixel
- uid: Pie.Format
  commentId: T:Pie.Format
  parent: Pie
  name: Format
  nameWithType: Format
  fullName: Pie.Format
